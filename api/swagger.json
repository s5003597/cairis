{
  "openapi" : "3.0.0",
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/failys/CAIRIS/1.0.1"
  } ],
  "info" : {
    "description" : "CAIRIS API [https://cairis.org](https://cairis.org)",
    "version" : "1.0.1",
    "title" : "CAIRIS API",
    "contact" : {
      "email" : "sfaily@bournemouth.ac.uk"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags" : [ {
    "name" : "architectural pattern",
    "description" : "Architectural Patterns API",
    "externalDocs" : {
      "description" : "Architectural Patterns documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/architecturalpatterns.html"
    }
  }, {
    "name" : "asset",
    "description" : "Assets API",
    "externalDocs" : {
      "description" : "Assets documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/assets.html"
    }
  }, {
    "name" : "attacker",
    "description" : "Attackers API",
    "externalDocs" : {
      "description" : "Attackers documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/attackers.html"
    }
  }, {
    "name" : "concept reference",
    "description" : "Concept References API",
    "externalDocs" : {
      "description" : "Concept References documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/misusability.html"
    }
  }, {
    "name" : "countermeasure",
    "description" : "Countermeasures API",
    "externalDocs" : {
      "description" : "Countermeasures documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/countermeasures.html"
    }
  }, {
    "name" : "data flow",
    "description" : "Data Flows API",
    "externalDocs" : {
      "description" : "Data Flows documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/threats_tm.html#threat-modelling"
    }
  }, {
    "name" : "dependency",
    "description" : "Dependency API",
    "externalDocs" : {
      "description" : "Dependencies documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/dependencies.html"
    }
  }, {
    "name" : "documentation",
    "description" : "Documentation generation API",
    "externalDocs" : {
      "description" : "Documentation generation documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/dependencies.html"
    }
  }, {
    "name" : "domain property",
    "description" : "Domain Properties API",
    "externalDocs" : {
      "description" : "Domain Properties documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/domainproperties.html"
    }
  }, {
    "name" : "document reference",
    "description" : "Document References API",
    "externalDocs" : {
      "description" : "Document References documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/roles_personas.html"
    }
  }, {
    "name" : "environment",
    "description" : "Environments API",
    "externalDocs" : {
      "description" : "Environments documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/environments.html"
    }
  }, {
    "name" : "external document",
    "description" : "External Documents API",
    "externalDocs" : {
      "description" : "External Documents documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/roles_personas.html"
    }
  }, {
    "name" : "export",
    "description" : "Export API",
    "externalDocs" : {
      "description" : "Export documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/io.html"
    }
  }, {
    "name" : "goal",
    "description" : "Goals API",
    "externalDocs" : {
      "description" : "Goals documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/gro.html"
    }
  }, {
    "name" : "import",
    "description" : "Import API",
    "externalDocs" : {
      "description" : "Import documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/io.html"
    }
  }, {
    "name" : "locations",
    "description" : "Locations API",
    "externalDocs" : {
      "description" : "Locations documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/locations.html"
    }
  }, {
    "name" : "object dependency",
    "description" : "Object dependencies API"
  }, {
    "name" : "obstacle",
    "description" : "Obstacles API",
    "externalDocs" : {
      "description" : "Obstacles documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/gro.html"
    }
  }, {
    "name" : "persona",
    "description" : "Personas API",
    "externalDocs" : {
      "description" : "Personas documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/roles_personas.html"
    }
  }, {
    "name" : "persona characteristic",
    "description" : "Persona Characteristics API",
    "externalDocs" : {
      "description" : "Persona characteristics documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/roles_personas.html#personas"
    }
  }, {
    "name" : "project",
    "description" : "Project API",
    "externalDocs" : {
      "description" : "Project settings documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/projects.html"
    }
  }, {
    "name" : "requirement",
    "description" : "Requirements API",
    "externalDocs" : {
      "description" : "Requirements documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/gro.html"
    }
  }, {
    "name" : "response",
    "description" : "Responses API",
    "externalDocs" : {
      "description" : "Responses documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/responses.html"
    }
  }, {
    "name" : "risk",
    "description" : "Risks API",
    "externalDocs" : {
      "description" : "Risks documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/risks.html"
    }
  }, {
    "name" : "role",
    "description" : "Roles API",
    "externalDocs" : {
      "description" : "Roles documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/roles_personas.html"
    }
  }, {
    "name" : "security pattern",
    "description" : "Security Patterns API",
    "externalDocs" : {
      "description" : "Security patterns documentation",
      "url" : "https://cairis.readthedocs.io/en/latest/patterns.html"
    }
  }, {
    "name" : "summary",
    "description" : "Summary API"
  }, {
    "name" : "task",
    "description" : "Tasks API",
    "externalDocs" : {
      "description" : "Task documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/tasks.html"
    }
  }, {
    "name" : "task characteristic",
    "description" : "Task Characteristics API",
    "externalDocs" : {
      "description" : "Task characteristics documentation",
      "url" : "https://cairis.readthedocs.io/en/latest/misusability.html"
    }
  }, {
    "name" : "template asset",
    "description" : "Template Assets API"
  }, {
    "name" : "template goal",
    "description" : "Template Assets API"
  }, {
    "name" : "template requirement",
    "description" : "Template Requirements API"
  }, {
    "name" : "threat",
    "description" : "Threats API",
    "externalDocs" : {
      "description" : "Threat documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/threats_tm.html"
    }
  }, {
    "name" : "traceability",
    "description" : "Traceability API",
    "externalDocs" : {
      "description" : "Traceability documentation",
      "url" : "https://cairis.readthedocs.io/en/latest/traceability.html"
    }
  }, {
    "name" : "trust boundary",
    "description" : "Trust Boundaries API",
    "externalDocs" : {
      "description" : "Trust Boundaries documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/threats_tm.html#threat-modelling"
    }
  }, {
    "name" : "use case",
    "description" : "Use Cases API",
    "externalDocs" : {
      "description" : "Use Case documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/usecases.html"
    }
  }, {
    "name" : "validation",
    "description" : "Validation API",
    "externalDocs" : {
      "description" : "Validation documentation",
      "url" : "https://cairis.readthedocs.io/en/latest/validation.html"
    }
  }, {
    "name" : "value type",
    "description" : "Value Types API",
    "externalDocs" : {
      "description" : "Value types documentation",
      "url" : "https://cairis.readthedocs.io/en/latest/configurable.html"
    }
  }, {
    "name" : "vulnerability",
    "description" : "Vulnerabilities API",
    "externalDocs" : {
      "description" : "Vulnerability documentation",
      "url" : "http://cairis.readthedocs.io/en/latest/vulnerabilities.html"
    }
  } ],
  "externalDocs" : {
    "description" : "Find out more about CAIRIS",
    "url" : "https://cairis.org"
  },
  "paths" : {
    "/api/architectural_patterns" : {
      "post" : {
        "summary" : "Add a new architectural pattern",
        "operationId" : "addArchitecturalPattern",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "architectural pattern" ],
        "requestBody" : {
          "description" : "Architectural pattern object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArchitecturalPattern"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Architectural pattern created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Architectural pattern creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "architectural pattern" ],
        "summary" : "Get architectural patterns",
        "operationId" : "getArchitecturalPatterns",
        "responses" : {
          "200" : {
            "description" : "List of architectural patterns",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ArchitecturalPattern"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Architectural Pattern retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/architectural_patterns/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "architectural pattern" ],
        "summary" : "Find architectural pattern",
        "description" : "Returns a single architectural pattern",
        "operationId" : "getArchitecturalPatternByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "architectural pattern name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single architectural pattern",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchitecturalPattern"
                }
              }
            }
          },
          "404" : {
            "description" : "Architectural Pattern not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Architectural Pattern retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "architectural pattern" ],
        "summary" : "Update architectural pattern",
        "description" : "Updates an architectural pattern",
        "operationId" : "updateArchitecturalPattern",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "architectural pattern name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Architectural Pattern object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArchitecturalPattern"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Architectural Pattern updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Architectural Pattern not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Architectural Pattern update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "architectural pattern" ],
        "summary" : "Delete architectural pattern",
        "description" : "Deletes an architectural pattern",
        "operationId" : "deleteArchitecturalPattern",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "architectural pattern name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Architectural pattern deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Architectural pattern not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Architectural pattern update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/architectural_patterns/name/{name}/environment/{environment}/situate" : {
      "post" : {
        "summary" : "Situate named architectural pattern in the named environment.",
        "operationId" : "situateArchitecturalPattern",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "architectural pattern name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environment",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "architectural pattern" ],
        "responses" : {
          "200" : {
            "description" : "Architectural pattern situated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Architectural pattern situation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets" : {
      "post" : {
        "summary" : "Add a new asset",
        "operationId" : "addAsset",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "asset" ],
        "requestBody" : {
          "description" : "Asset object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Asset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Asset created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Asset creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "asset" ],
        "summary" : "Get assets",
        "operationId" : "getAssets",
        "responses" : {
          "200" : {
            "description" : "List of assets",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Asset retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/association" : {
      "post" : {
        "summary" : "Add a new asset association",
        "operationId" : "addAssetAssociation",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "asset" ],
        "requestBody" : {
          "description" : "Asset Association object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetAssociation"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Asset association created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Asset association creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "asset" ],
        "summary" : "Get asset associations",
        "operationId" : "getAssetAssociations",
        "responses" : {
          "200" : {
            "description" : "List of asset associations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAssociation"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Asset association retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/association/environment/{environment}/head/{head}/tail/{tail}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "asset" ],
        "summary" : "Get asset association",
        "description" : "Returns a single asset association",
        "operationId" : "getAssetAssociationByName",
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "Environment asset association is situated in",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "head",
          "in" : "path",
          "description" : "Head asset name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tail",
          "in" : "path",
          "description" : "Tail asset name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single asset associatioh",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAssociation"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset association not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Asset association retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "asset" ],
        "summary" : "Update asset association",
        "description" : "Updates an asset association",
        "operationId" : "updateAssetAssociation",
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "Environment asset association is situated in",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "head",
          "in" : "path",
          "description" : "Head asset name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tail",
          "in" : "path",
          "description" : "Tail asset name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Asset Association object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetAssociation"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Asset association updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset association not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Asset association update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "asset" ],
        "summary" : "Delete asset association",
        "description" : "Deletes an asset association",
        "operationId" : "deleteAssetAssociation",
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "Environment asset association is situated in",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "head",
          "in" : "path",
          "description" : "Head asset name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tail",
          "in" : "path",
          "description" : "Tail asset name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Asset association deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset association not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Asset association update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/model/environment/{environment}/asset/{asset}" : {
      "get" : {
        "summary" : "Get asset model",
        "description" : "Get requirements models associated with environment, possible filtered by asset.",
        "operationId" : "getAssetModel",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "asset" ],
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "asset",
          "in" : "path",
          "description" : "asset name or 'all'",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Asset model",
            "content" : {
              "image/svg+xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Environment or Asset not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Asset model retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "asset" ],
        "summary" : "Find asset",
        "description" : "Returns a single asset",
        "operationId" : "getAssetByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "asset name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Asset retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "asset" ],
        "summary" : "Update asset",
        "description" : "Updates an asset",
        "operationId" : "updateAsset",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "asset name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Asset object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Asset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Asset updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Asset update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "asset" ],
        "summary" : "Delete asset",
        "description" : "Deletes an asset",
        "operationId" : "deleteAsset",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "asset name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Asset deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Asset update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/attackers" : {
      "post" : {
        "summary" : "Add a new attacker",
        "operationId" : "addAttacker",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "attacker" ],
        "requestBody" : {
          "description" : "Attacker object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Attacker"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Attacker created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Attacker creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "attacker" ],
        "summary" : "Get attackers",
        "operationId" : "getAttackers",
        "responses" : {
          "200" : {
            "description" : "List of attackers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Attacker"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Attacker retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/attackers/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "attacker" ],
        "summary" : "Find attacker",
        "description" : "Returns a single attacker",
        "operationId" : "getAttackerByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "attacker name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single attacker",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Attacker"
                }
              }
            }
          },
          "404" : {
            "description" : "Attacker not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Attacker retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "attacker" ],
        "summary" : "Update attacker",
        "description" : "Updates an attacker",
        "operationId" : "updateAttacker",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "attacker name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Attacker object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Attacker"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Attacker updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Attacker not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Attacker update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "attacker" ],
        "summary" : "Delete attacker",
        "description" : "Deletes an attacker",
        "operationId" : "deleteAttacker",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "attacker name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Attacker deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Attacker not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Attacker delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/concept_references" : {
      "post" : {
        "summary" : "Add a new concept reference",
        "operationId" : "addConceptReference",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "concept reference" ],
        "requestBody" : {
          "description" : "Concept Reference object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConceptReference"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Concept Reference created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Concept Reference creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "concept reference" ],
        "summary" : "Get concept references",
        "operationId" : "getConceptReferences",
        "responses" : {
          "200" : {
            "description" : "List of concept references",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ConceptReference"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Concept Reference retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/concept_references/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "concept reference" ],
        "summary" : "Find concept reference",
        "description" : "Returns a single concept reference",
        "operationId" : "getConceptReferenceyByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Concept Reference name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single Concept Reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConceptReference"
                }
              }
            }
          },
          "404" : {
            "description" : "Concept Reference not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Concept Reference retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "concept reference" ],
        "summary" : "Update concept reference",
        "description" : "Updates a concept reference",
        "operationId" : "updateConceptReference",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Concept Reference name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Concept Reference object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConceptReference"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Concept Reference updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Concept Reference not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Concept Reference update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "concept reference" ],
        "summary" : "Delete Concept Reference",
        "description" : "Deletes a concept referene",
        "operationId" : "deleteConceptReference",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Concept Reference name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Concept Reference deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Document Reference not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Concept Reference update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/countermeasures" : {
      "post" : {
        "summary" : "Add a new countermeasure",
        "operationId" : "addCountermeasure",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "countermeasure" ],
        "requestBody" : {
          "description" : "Countermeasure object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Countermeasure"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Countermeasure created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Countermeasure creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "countermeasure" ],
        "summary" : "Get countermeasures",
        "operationId" : "getCountermeasures",
        "responses" : {
          "200" : {
            "description" : "List of countermeasures",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Countermeasure"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Countermeasure retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/countermeasures/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "countermeasure" ],
        "summary" : "Find countermeasure",
        "description" : "Returns a single countermeasure",
        "operationId" : "getCountermeasureByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "countermeasure name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single countermeasure",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Countermeasure"
                }
              }
            }
          },
          "404" : {
            "description" : "Countermeasure not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Countermeasure retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "countermeasure" ],
        "summary" : "Update countermeasure",
        "description" : "Updates a countermeasure",
        "operationId" : "updateCountermeasure",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "countermeasure name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Countermeasure object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Countermeasure"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Countermeasure updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Countermeasure not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Countermeasure update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "countermeasure" ],
        "summary" : "Delete countermeasure",
        "description" : "Deletes a countermeasure",
        "operationId" : "deleteCountermeasure",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "countermeasure name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Countermeasure deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Countermeasure not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Countermeasure delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/dependencies" : {
      "post" : {
        "summary" : "Add a new dependency",
        "operationId" : "addDependency",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "dependency" ],
        "requestBody" : {
          "description" : "Dependency object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Dependency"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Dependency created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Dependency creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "dependency" ],
        "summary" : "Get dependency",
        "operationId" : "getDependencies",
        "responses" : {
          "200" : {
            "description" : "List of dependencies",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Dependency"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Dependency retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/dataflows" : {
      "post" : {
        "summary" : "Add a new data flow",
        "operationId" : "addDataFlow",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "data flow" ],
        "requestBody" : {
          "description" : "Data flow object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DataFlow"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Data flow created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Data flow creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "data flow" ],
        "summary" : "Get data flows",
        "operationId" : "getDataFlows",
        "responses" : {
          "200" : {
            "description" : "List of data flows",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DataFlow"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Data flow retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/dataflows/diagram/environment/{environment}/filter/{filter}" : {
      "get" : {
        "summary" : "Get data flow diagram",
        "description" : "Get DFD associated with environment, possible filtered by model element.",
        "operationId" : "getDFDModel",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "asset" ],
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "path",
          "description" : "filter element name or None if no filter is set.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Data Flow Diagram",
            "content" : {
              "image/svg+xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Environment or filter element not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "DFD retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/dataflows/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "data flow" ],
        "summary" : "Find data flow",
        "description" : "Returns a single data flow",
        "operationId" : "getDataFlowByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "data flow name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single data flow",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataFlow"
                }
              }
            }
          },
          "404" : {
            "description" : "Data flow not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Data flow retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "data flow" ],
        "summary" : "Update data flow",
        "description" : "Updates a data flow",
        "operationId" : "updateDataFlow",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "data flow name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Data flow object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DataFlow"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Data flow updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Data flow not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Data flow update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "data flow" ],
        "summary" : "Delete data flow",
        "description" : "Deletes a data flow",
        "operationId" : "deleteDataFlow",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "data flow name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Data flow deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Data flow not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Data flow delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/dependencies/environment/{environment}/depender/{depender}/dependee/{dependee}/dependency/{dependency}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "dependency" ],
        "summary" : "Find dependency",
        "description" : "Returns a single dependency",
        "operationId" : "getDependencyByName",
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "Environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "depender",
          "in" : "path",
          "description" : "Depender name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dependee",
          "in" : "path",
          "description" : "Dependee name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dependency",
          "in" : "path",
          "description" : "Dependency name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single Dependency",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Dependency"
                }
              }
            }
          },
          "404" : {
            "description" : "Dependency not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Dependency retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "dependency" ],
        "summary" : "Update dependency",
        "description" : "Updates a dependency",
        "operationId" : "updateDependency",
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "Environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "depender",
          "in" : "path",
          "description" : "Depender name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dependee",
          "in" : "path",
          "description" : "Dependee name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dependency",
          "in" : "path",
          "description" : "Dependency name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Dependency object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Dependency"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Dependency updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Dependency not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Dependency update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "dependency" ],
        "summary" : "Delete Dependency",
        "description" : "Deletes a dependency",
        "operationId" : "deleteDependency",
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "Environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "depender",
          "in" : "path",
          "description" : "Depender name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dependee",
          "in" : "path",
          "description" : "Dependee name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dependency",
          "in" : "path",
          "description" : "Dependency name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dependency deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Dependency not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Dependency delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/document_references" : {
      "post" : {
        "summary" : "Add a new document reference",
        "operationId" : "addDocumentReference",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "document reference" ],
        "requestBody" : {
          "description" : "Document Reference object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DocumentReference"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Document Reference created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Document Reference creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "document reference" ],
        "summary" : "Get document references",
        "operationId" : "getDocumentReferences",
        "responses" : {
          "200" : {
            "description" : "List of document references",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DocumentReference"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Document Reference retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/document_references/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "document reference" ],
        "summary" : "Find document reference",
        "description" : "Returns a single document reference",
        "operationId" : "getDocumentReferenceyByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Document Reference name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single Document Reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentReference"
                }
              }
            }
          },
          "404" : {
            "description" : "Document Reference not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Document Reference retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "document reference" ],
        "summary" : "Update document reference",
        "description" : "Updates a document reference",
        "operationId" : "updateDocumentReference",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Document Reference name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Document Reference object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DocumentReference"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Document Reference updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Document Reference not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Document Reference update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "document reference" ],
        "summary" : "Delete Document Reference",
        "description" : "Deletes a document referene",
        "operationId" : "deleteDocumentReference",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Document Reference name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Document Reference deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Document Reference not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Document Reference update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/documentation/type/{doc_type}/format/{doc_format}" : {
      "get" : {
        "summary" : "Generate documentation",
        "description" : "Export CAIRIS model file.  Named report.pdf or report.rtf, based on the doc_format",
        "operationId" : "generateDocumentation",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "parameters" : [ {
          "name" : "doc_type",
          "in" : "path",
          "description" : "Type of documentation",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "Requirements", "Personas", "Data Protection Impact Assessment" ],
            "example" : "Requirements"
          }
        }, {
          "name" : "doc_format",
          "in" : "path",
          "description" : "File type",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "PDF", "RTF" ],
            "example" : "PDF"
          }
        } ],
        "tags" : [ "documentation" ],
        "responses" : {
          "200" : {
            "description" : "CAIRIS documentation file",
            "content" : {
              "application/pdf" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              },
              "application/rtf" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "400" : {
            "description" : "Documentation generation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/domainproperties" : {
      "post" : {
        "summary" : "Add a new domain property",
        "operationId" : "addDomainProperty",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "domain property" ],
        "requestBody" : {
          "description" : "Domain Property object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DomainProperty"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Domain Property created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Domain Property creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "domain property" ],
        "summary" : "Get domain property",
        "operationId" : "getDomainProperties",
        "responses" : {
          "200" : {
            "description" : "List of domain properties",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DomainProperty"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Domain Property retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/domainproperties/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "domain property" ],
        "summary" : "Find domain property",
        "description" : "Returns a single domain property",
        "operationId" : "getDomainPropertyByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Domain Property name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single Domain Property",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DomainProperty"
                }
              }
            }
          },
          "404" : {
            "description" : "Domain Property not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Domain Property retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "domain property" ],
        "summary" : "Update domain property",
        "description" : "Updates a domain property",
        "operationId" : "updateDomainProperty",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Domain Property name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Domain Property object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DomainProperty"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Domain Property updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Domain Property not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Domain Property update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "domain property" ],
        "summary" : "Delete Domain Property",
        "description" : "Deletes a domain property",
        "operationId" : "deleteDomainProperty",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Domain Property name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Domain Property deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Domain Property not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Domain Property update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/environments" : {
      "post" : {
        "summary" : "Add a new environment",
        "operationId" : "addEnvironment",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "environment" ],
        "requestBody" : {
          "description" : "Environment object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Environment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Environment created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Environment creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "environment" ],
        "summary" : "Get environments",
        "operationId" : "getEnvironments",
        "responses" : {
          "200" : {
            "description" : "List of environments",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Environment"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Environment retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/environments/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "environment" ],
        "summary" : "Find environment",
        "description" : "Returns a single environment",
        "operationId" : "getEnvironmentByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Environment"
                }
              }
            }
          },
          "404" : {
            "description" : "Environment not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Environment retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "environment" ],
        "summary" : "Update environment",
        "description" : "Updates an environment",
        "operationId" : "updateEnvironment",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Environment object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Environment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Environment updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Environment not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Environment update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "environment" ],
        "summary" : "Delete environment",
        "description" : "Deletes an environment",
        "operationId" : "deleteEnvironment",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Environment deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Environment not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Environment update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/export/file" : {
      "get" : {
        "summary" : "Export CAIRIS model",
        "description" : "Export CAIRIS model file.  Named model.xml",
        "operationId" : "exportModel",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "export" ],
        "responses" : {
          "200" : {
            "description" : "CAIRIS model file",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "400" : {
            "description" : "Export error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/export/stix" : {
      "get" : {
        "summary" : "Export Risk Analysis STIX model",
        "description" : "Export Risk Analysis STIX model file.  Named model.json",
        "operationId" : "exportModel",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "export" ],
        "responses" : {
          "200" : {
            "description" : "STIX model file",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "400" : {
            "description" : "Export error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/export/file/architectural_pattern/{name}" : {
      "get" : {
        "summary" : "Export architectural pattern",
        "description" : "Export architectural pattern file.  File given name of the architectural pattern.",
        "operationId" : "exportModel",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "architectural pattern name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "export" ],
        "responses" : {
          "200" : {
            "description" : "Architectural pattern model file",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Architectural pattern not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Export error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/export/file/grl/task/{task_name}/persona/{persona_name}/environment/{environment_name}" : {
      "get" : {
        "summary" : "Export GRL model",
        "description" : "Export GRL model file.  File given name of the task. Task prefix is grl, unlike other model files which use xml",
        "operationId" : "exportModel",
        "parameters" : [ {
          "name" : "task_name",
          "in" : "path",
          "description" : "Task name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "persona_name",
          "in" : "path",
          "description" : "Persona name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environment_name",
          "in" : "path",
          "description" : "Environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "export" ],
        "responses" : {
          "200" : {
            "description" : "GRL model file",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Task, persona, or environment not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Export error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/external_documents" : {
      "post" : {
        "summary" : "Add a new external document",
        "operationId" : "addExternalDocument",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "external document" ],
        "requestBody" : {
          "description" : "ExternalDocument object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExternalDocument"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "External Document created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "External Document creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "external document" ],
        "summary" : "Get external documents",
        "operationId" : "getExternalDocuments",
        "responses" : {
          "200" : {
            "description" : "List of external documents",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExternalDocument"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "External Document retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/external_documents/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "external document" ],
        "summary" : "Find external document",
        "description" : "Returns a single external document",
        "operationId" : "getExternalDocumentByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "external document name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single external document",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalDocument"
                }
              }
            }
          },
          "404" : {
            "description" : "External Document not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "External Document retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "external document" ],
        "summary" : "Update external document",
        "description" : "Updates an external document",
        "operationId" : "updateExternalDocument",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "external document name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "External Document object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExternalDocument"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "External Document updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "External Document not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "External Document update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "external document" ],
        "summary" : "Delete external document",
        "description" : "Deletes an external document",
        "operationId" : "deleteExternalDocument",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "external document name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "External Document deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "External Document not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "External Document update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/goals" : {
      "post" : {
        "summary" : "Add a new goal",
        "operationId" : "addGoal",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "goal" ],
        "requestBody" : {
          "description" : "Goal object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Goal"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Goal created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Goal creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "goal" ],
        "summary" : "Get goals",
        "operationId" : "getGoals",
        "responses" : {
          "200" : {
            "description" : "List of goals",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Goal"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Goal retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/goals/model/environment/{environment}/goal/{goal}/usecase/{usecase}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "goal" ],
        "summary" : "Get goal model",
        "description" : "Get KAOS goal model associated with this environment, possibly filtered by goal and/or use case.",
        "operationId" : "getGoalModel",
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Psychosis"
        }, {
          "name" : "goal",
          "in" : "path",
          "description" : "goal name acting as root node of this model, or 'all' if no filtering is applied.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "all"
        }, {
          "name" : "usecase",
          "in" : "path",
          "description" : "usecase name where goals only specific to the usecase are shown, or 'all' if no filtering is applied.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "all"
        } ],
        "responses" : {
          "200" : {
            "description" : "Goal model",
            "content" : {
              "image/svg+xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Environment, goal, or use case not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Model retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/goals/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "goal" ],
        "summary" : "Find goal",
        "description" : "Returns a single goal",
        "operationId" : "getGoalByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "goal name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single goal",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Goal"
                }
              }
            }
          },
          "404" : {
            "description" : "Goal not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Goal retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "goal" ],
        "summary" : "Update goal",
        "description" : "Updates a goal",
        "operationId" : "updateGoal",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "goal name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Goal object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Goal"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Goal updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Goal not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Goal update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "goal" ],
        "summary" : "Delete goal",
        "description" : "Deletes a goal",
        "operationId" : "deleteGoal",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "goal name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Goal deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Goal not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Goal update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/import/text" : {
      "post" : {
        "summary" : "Import model",
        "operationId" : "importModel",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "import" ],
        "requestBody" : {
          "description" : "Import model arguments",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportArguments"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Model imported",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Import error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations" : {
      "post" : {
        "summary" : "Add a new locations object",
        "operationId" : "addLocations",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "locations" ],
        "requestBody" : {
          "description" : "Locations object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Locations"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Locations object created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Locations object creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "locations" ],
        "summary" : "Get locations",
        "operationId" : "getLocations",
        "responses" : {
          "200" : {
            "description" : "List of locations objects",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Locations"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Locations object retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "locations" ],
        "summary" : "Find locations object",
        "description" : "Returns a single locations object",
        "operationId" : "getLocationsByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "locations object name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single locations object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Locations"
                }
              }
            }
          },
          "404" : {
            "description" : "Locations object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Locations object retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "locations" ],
        "summary" : "Update locations object",
        "description" : "Updates a locations object",
        "operationId" : "updateLocations",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "locations object name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Locations object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Locations"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Locations object updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Locations object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Locations object update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "locations" ],
        "summary" : "Delete locations object",
        "description" : "Deletes a location",
        "operationId" : "deleteLocations",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "locations object name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Locations object deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Locations object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Locations object update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/model/name/{locations}/environment/{environment}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "locations" ],
        "summary" : "Get locations model",
        "description" : "Get locations model associated with this environment.",
        "operationId" : "getLocationsModel",
        "parameters" : [ {
          "name" : "locations",
          "in" : "path",
          "description" : "Locations object name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "PooleWWTW"
        }, {
          "name" : "environment",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Day"
        } ],
        "responses" : {
          "200" : {
            "description" : "Locations model",
            "content" : {
              "image/svg+xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Locations object or Environment not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Model retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/object_dependency/dimension/{dimension}/object/{object}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "object dependency" ],
        "summary" : "Get types and name of objects dependent on the passed dimension/object",
        "operationId" : "getObjectDependencies",
        "parameters" : [ {
          "name" : "dimension",
          "in" : "path",
          "description" : "dimension name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "object",
          "in" : "path",
          "description" : "object name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of object dependencies",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ObjectDependency"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Object dependency retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/obstacles" : {
      "post" : {
        "summary" : "Add a new obstacle",
        "operationId" : "addObstacle",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "obstacle" ],
        "requestBody" : {
          "description" : "Obstacle object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Obstacle"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Obstacle created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Obstacle creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "obstacle" ],
        "summary" : "Get obstacles",
        "operationId" : "getObstacles",
        "responses" : {
          "200" : {
            "description" : "List of obstacles",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Obstacle"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Obstacle retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/obstacles/model/environment/{environment}/obstacle/{obstacle}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "obstacle" ],
        "summary" : "Get obstacle model",
        "description" : "Get KAOS obstacle model associated with this environment, possibly filtered by obstacle.",
        "operationId" : "getObstacleModel",
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Psychosis"
        }, {
          "name" : "obstacle",
          "in" : "path",
          "description" : "obstacle name acting as root node of this model, or 'all' if no filtering is applied.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "all"
        } ],
        "responses" : {
          "200" : {
            "description" : "Obstacle model",
            "content" : {
              "image/svg+xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Environment or obstacle not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Model retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/obstacles/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "obstacle" ],
        "summary" : "Find obstacle",
        "description" : "Returns a single obstacle",
        "operationId" : "getObstacleByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "obstacle name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single obstacle",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Obstacle"
                }
              }
            }
          },
          "404" : {
            "description" : "Obstacle not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Obstacle retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "obstacle" ],
        "summary" : "Update obstacle",
        "description" : "Updates an obstacle",
        "operationId" : "updateObstacle",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "obstacle name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Obstacle object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Obstacle"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Obstacle updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Obstacle not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Obstacle update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "obstacle" ],
        "summary" : "Delete obstacle",
        "description" : "Deletes an obstacle",
        "operationId" : "deleteObstacle",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "obstacle name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Obstacle deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Obstacle not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Obstacle update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/personas" : {
      "post" : {
        "summary" : "Add a new persona",
        "operationId" : "addPersona",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "persona" ],
        "requestBody" : {
          "description" : "Persona object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Persona"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Persona created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Persona creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "persona" ],
        "summary" : "Get personas",
        "operationId" : "getPersonas",
        "responses" : {
          "200" : {
            "description" : "List of personas",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Persona"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Persona retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/personas/model/name/{persona}/variable/{variable}/characteristic/{characteristic}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "persona" ],
        "summary" : "Get persona model",
        "description" : "Get Persona argumentation model by name, possible filtered by behavioural variable and/or persona characteristic.",
        "operationId" : "getPersonaModel",
        "parameters" : [ {
          "name" : "persona",
          "in" : "path",
          "description" : "persona name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Helen"
        }, {
          "name" : "variable",
          "in" : "path",
          "description" : "Behavioural variable name, or 'All' if no filtering is applied.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "All", "Activities", "Aptitudes", "Attitudes", "Motivations", "Skills", "Environment Narrative", "Intrinsic", "Contextual" ]
          },
          "example" : "All"
        }, {
          "name" : "characteristic",
          "in" : "path",
          "description" : "Persona characteristic name, or 'All' if no filtering is applied",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "All"
        } ],
        "responses" : {
          "200" : {
            "description" : "Persona model",
            "content" : {
              "image/svg+xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Persona and/or filter element not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Model retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/personas/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "persona" ],
        "summary" : "Find persona",
        "description" : "Returns a single persona",
        "operationId" : "getPersonaByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "persona name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single persona",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Persona"
                }
              }
            }
          },
          "404" : {
            "description" : "Persona not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Persona retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "persona" ],
        "summary" : "Update persona",
        "description" : "Updates a persona",
        "operationId" : "updatePersona",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "persona name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Persona object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Persona"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Persona updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Persona not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Persona update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "persona" ],
        "summary" : "Delete persona",
        "description" : "Deletes a persona",
        "operationId" : "deletePersona",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "persona name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Persona deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Persona not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Persona update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/persona_characteristics" : {
      "post" : {
        "summary" : "Add a new persona characteristic",
        "operationId" : "addPersonaCharacteristic",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "persona characteristic" ],
        "requestBody" : {
          "description" : "Persona Characteristic object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PersonaCharacteristic"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Persona Characteristic created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Persona characteristic creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "persona characteristic" ],
        "summary" : "Get persona characteristics",
        "operationId" : "getPersonaCharacteristics",
        "responses" : {
          "200" : {
            "description" : "List of persona characteristics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PersonaCharacteristic"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Persona characteristic retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/persona_characteristics/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "persona characteristic" ],
        "summary" : "Find persona characteristic",
        "description" : "Returns a single persona characteristic",
        "operationId" : "getPersonaCharacteristicByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "persona characteristic name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single persona characteristic",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonaCharacteristic"
                }
              }
            }
          },
          "404" : {
            "description" : "Persona characteristic not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Persona characteristic retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "persona characteristic" ],
        "summary" : "Update persona characteristic",
        "description" : "Updates a persona characteristic",
        "operationId" : "updatePersonaCharacteristic",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "persona characteristic name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Persona characteristic object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PersonaCharacteristic"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Persona characteristic updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Persona characteristic not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Persona characteristic update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "persona characteristic" ],
        "summary" : "Delete persona characteristic",
        "description" : "Deletes a persona characteristic",
        "operationId" : "deletePersonaCharacteristic",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "persona characteristic name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Persona characteristic deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Persona characteristic not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Persona characteristic update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/requirements" : {
      "post" : {
        "summary" : "Add new requirement",
        "description" : "Add a new requirement to an associated asset or environment",
        "operationId" : "addRequirement",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "requirement" ],
        "parameters" : [ {
          "name" : "asset",
          "in" : "query",
          "description" : "Environment requirement should be associated with.  Either this or environment should be defined.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environment",
          "in" : "query",
          "description" : "Asset requirement should be associated with.  Either this or environment should be defined.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requirement object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Requirement"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Requirement created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Requirement creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/requirements/asset/{name}" : {
      "get" : {
        "summary" : "Get asset requirements",
        "description" : "Get requirements associated with specified asset",
        "operationId" : "getRequirementsByAsset",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "requirement" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "asset name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Requirements associated with asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Requirement"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Asset not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Requirements retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/requirement/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "requirement" ],
        "summary" : "Find requirement",
        "description" : "Returns a single requirement",
        "operationId" : "getRequirementByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "requirement name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single requirement",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Requirement"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Asset retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "requirement" ],
        "summary" : "Update requirement",
        "description" : "Updates a requirement",
        "operationId" : "updateRequirement",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "requirement name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requirement object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Requirement"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Requirement updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Requirement not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Requirement update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "requirement" ],
        "summary" : "Delete requirement",
        "description" : "Deletes a requirement",
        "operationId" : "deleteRequirement",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "requirement name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Requirement deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Requirement not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Requirement update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/requirements/environment/{name}" : {
      "get" : {
        "summary" : "Get environment requirements",
        "description" : "Get requirements associated with specified environment",
        "operationId" : "getRequirementsByEnvironment",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "requirement" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Requirements associated with environment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Requirement"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Environment not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Requirements retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/requirements/model/environment/{environment}/requirement/{requirement}" : {
      "get" : {
        "summary" : "Get requirements model",
        "description" : "Get requirements models associated with environment, possible filtered by requirement.  Returns a partially drawn concept map model.  The client replaces the model nodes with Chernoff faces.",
        "operationId" : "getRequirementsModel",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "requirement" ],
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "requirement",
          "in" : "path",
          "description" : "requirement name or 'all'",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Partially generated requirements model",
            "content" : {
              "image/svg+xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Environment or Requirement not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Requirements model retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/responses" : {
      "post" : {
        "summary" : "Add new response",
        "description" : "Add a new risk response",
        "operationId" : "addResponse",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "response" ],
        "requestBody" : {
          "description" : "Response object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Response"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Response created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Response creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "response" ],
        "summary" : "Get responses",
        "operationId" : "getResponses",
        "responses" : {
          "200" : {
            "description" : "List of responses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Response"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Response retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/responses/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "response" ],
        "summary" : "Find response",
        "description" : "Returns a single response",
        "operationId" : "getResponseByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "response name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "Response not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Response retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "response" ],
        "summary" : "Update response",
        "description" : "Updates a response",
        "operationId" : "updateResponse",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "response name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Response object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Response"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Response updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Response not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Response update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "response" ],
        "summary" : "Delete response",
        "description" : "Deletes a response",
        "operationId" : "deleteResponse",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "response name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Response deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Response not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Response update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/responsibility/model/environment/{environment}/role/{role}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "goal" ],
        "summary" : "Get responsibility model",
        "description" : "Get KAOS responsibility model associated with this environment, possibly filtered by role.",
        "operationId" : "getResponsibilityModel",
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Psychosis"
        }, {
          "name" : "role",
          "in" : "path",
          "description" : "role name acting as the filter this model, or 'all' if no filtering is applied.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "all"
        } ],
        "responses" : {
          "200" : {
            "description" : "Responsibility model",
            "content" : {
              "image/svg+xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Environment or role not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Model retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/risks" : {
      "post" : {
        "summary" : "Add a new risk",
        "operationId" : "addRisk",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "risk" ],
        "requestBody" : {
          "description" : "Risk object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Risk"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Risk created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Risk creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "risk" ],
        "summary" : "Get risks",
        "operationId" : "getRisks",
        "responses" : {
          "200" : {
            "description" : "List of risks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Risk"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Risk retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/risks/model/environment/{environment}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "risk" ],
        "summary" : "Get risk model",
        "description" : "Get risk analysis model associated with this environment, possibly filtered by some combination of dimension, object, and layout",
        "operationId" : "getGoalModel",
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Psychosis"
        }, {
          "name" : "dimension",
          "in" : "query",
          "description" : "Dimension to filter model by.  Permissable value are - all, asset, attacker, countermeasure, misusecase, obstacle, requirement, response, risk, role, task, threat, and vulnerability.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "object",
          "in" : "query",
          "description" : "Object to filter model by.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "layout",
          "in" : "query",
          "description" : "Model layout.  Permissable values are - Hierarchical, Spring, Radial, and Circular",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Risk analysis model",
            "content" : {
              "image/svg+xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Dimension or object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Model retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/risks/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "risk" ],
        "summary" : "Find risk",
        "description" : "Returns a single risk",
        "operationId" : "getRiskByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "risk name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single risk",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Risk"
                }
              }
            }
          },
          "404" : {
            "description" : "Risk not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Risk retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "risk" ],
        "summary" : "Update risk",
        "description" : "Updates a risk",
        "operationId" : "updateRisk",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "risk name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Risk object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Risk"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Risk updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Risk not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Risk update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "risk" ],
        "summary" : "Delete risk",
        "description" : "Deletes a risk",
        "operationId" : "deleteRisk",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "risk name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Risk deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Risk not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Risk delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/roles" : {
      "post" : {
        "summary" : "Add a new role",
        "operationId" : "addRole",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "role" ],
        "requestBody" : {
          "description" : "Role object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Role"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Role created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Role creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "role" ],
        "summary" : "Get roles",
        "operationId" : "getRoles",
        "responses" : {
          "200" : {
            "description" : "List of roles",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Role retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/roles/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "role" ],
        "summary" : "Find role",
        "description" : "Returns a single role",
        "operationId" : "getRoleByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "role name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "404" : {
            "description" : "Role not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Role retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "role" ],
        "summary" : "Update role",
        "description" : "Updates a role",
        "operationId" : "updateRole",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "role name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Role object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Role"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Role updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Role not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Role update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "role" ],
        "summary" : "Delete role",
        "description" : "Deletes a role",
        "operationId" : "deleteRole",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "role name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Role deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Role not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Role delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/security_patterns" : {
      "post" : {
        "summary" : "Add a new security pattern",
        "operationId" : "addSecurityPattern",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "security pattern" ],
        "requestBody" : {
          "description" : "Security pattern object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SecurityPattern"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Security pattern created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Security pattern creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "security pattern" ],
        "summary" : "Get security patterns",
        "operationId" : "getSecurityPatterns",
        "responses" : {
          "200" : {
            "description" : "List of security patterns",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SecurityPattern"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Security pattern retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/security_patterns/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "security pattern" ],
        "summary" : "Find security pattern",
        "description" : "Returns a single security pattern",
        "operationId" : "getSecurityPatternByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "security pattern name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single Security pattern",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SecurityPattern"
                }
              }
            }
          },
          "404" : {
            "description" : "Security pattern not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Security pattern retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "security pattern" ],
        "summary" : "Update securit pattern",
        "description" : "Updates a security pattern",
        "operationId" : "updateSecurityPattern",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Security pattern name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Security pattern object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SecurityPattern"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Security pattern updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Security pattern not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Security pattern update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "security pattern" ],
        "summary" : "Delete security pattern",
        "description" : "Deletes a security pattern",
        "operationId" : "deleteSecurityPattern",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "security pattern name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Security pattern deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Security pattern not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Security pattern delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/security_patterns/name/{name}/environment/{environment}/situate" : {
      "post" : {
        "summary" : "Situate named security pattern assets, requirements, and structure in the named environment.",
        "operationId" : "situateSecurityPattern",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "security pattern name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environment",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "security pattern" ],
        "responses" : {
          "200" : {
            "description" : "Security pattern situated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Security pattern situation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/settings" : {
      "put" : {
        "summary" : "Update project settings",
        "operationId" : "updateProjectSettings",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "project" ],
        "requestBody" : {
          "description" : "ProjectSettings object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProjectSettings"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Project settings updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "project" ],
        "summary" : "Get project settings",
        "operationId" : "getProjectSettings",
        "responses" : {
          "200" : {
            "description" : "Project settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectSettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Project settings retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/settings/clear" : {
      "post" : {
        "summary" : "Clear current project",
        "operationId" : "clearProject",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "project" ],
        "responses" : {
          "200" : {
            "description" : "Current project cleared",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Project clear error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/settings/database/{name}/create" : {
      "post" : {
        "summary" : "Create new CAIRIS database",
        "operationId" : "createDatabase",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "project" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "database name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "New database created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Database creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/settings/database/{name}/delete" : {
      "post" : {
        "summary" : "Delete named CAIRIS database",
        "operationId" : "deleteDatabase",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "project" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "database name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Database deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Database deletion error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/settings/database/{name}/open" : {
      "post" : {
        "summary" : "Open named CAIRIS database",
        "operationId" : "openDatabase",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "project" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "database name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Database opened",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Database open error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/summary/dimension/risk/environment/{environment_name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "summary" ],
        "summary" : "Get risk summary data",
        "description" : "Get summary data for environment specific risks",
        "operationId" : "getEnvironmentThreatSummary",
        "parameters" : [ {
          "name" : "environment_name",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Complete"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of summary results",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SummaryResult"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Summary retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/summary/dimension/threat/environment/{environment_name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "summary" ],
        "summary" : "Get threat summary data",
        "description" : "Get summary data for environment specific threats",
        "operationId" : "getEnvironmentThreatSummary",
        "parameters" : [ {
          "name" : "environment_name",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Complete"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of summary results",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SummaryResult"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Summary retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/summary/dimension/vulnerability/environment/{environment_name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "summary" ],
        "summary" : "Get threat summary data",
        "description" : "Get summary data for environment specific vulnerabilities",
        "operationId" : "getEnvironmentVulnerabilitySummary",
        "parameters" : [ {
          "name" : "environment_name",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Complete"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of summary results",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SummaryResult"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Summary retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks" : {
      "post" : {
        "summary" : "Add a new task",
        "operationId" : "addTask",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "task" ],
        "requestBody" : {
          "description" : "Task object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Task"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Task created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Threat creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "task" ],
        "summary" : "Get tasks",
        "operationId" : "getTasks",
        "responses" : {
          "200" : {
            "description" : "List of tasks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Task retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/task/model/environment/{environment}/task/{task}/misusecase/{misusecase}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "task" ],
        "summary" : "Get Task model",
        "description" : "Get Task model by environment, possible filtered by task and/or misuse case.",
        "operationId" : "getTaskModel",
        "parameters" : [ {
          "name" : "environment",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Complete"
        }, {
          "name" : "task",
          "in" : "path",
          "description" : "Task name, or 'all' if no filtering is applied",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "all"
        }, {
          "name" : "misusecase",
          "in" : "path",
          "description" : "Misuse case name, or 'all' if no filtering is applied",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "all"
        } ],
        "responses" : {
          "200" : {
            "description" : "Task model",
            "content" : {
              "image/svg+xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Environment and/or filtering element not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Model retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/task/model/misusability/{mc_name}/characteristic/{characteristic}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "task" ],
        "summary" : "Get Misusability case model",
        "description" : "Get Misusability case model by name, possible filtered by task characteristic.",
        "operationId" : "getMisusabilityCaseModel",
        "parameters" : [ {
          "name" : "mc_name",
          "in" : "path",
          "description" : "misusability case name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Policy conflict"
        }, {
          "name" : "characteristic",
          "in" : "path",
          "description" : "Task characteristic name, or 'all' if no filtering is applied",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "all"
        } ],
        "responses" : {
          "200" : {
            "description" : "Misusability case model",
            "content" : {
              "image/svg+xml" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Misusability case and/or characteristic not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Model retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "task" ],
        "summary" : "Find task",
        "description" : "Returns a single task",
        "operationId" : "getTaskByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "task name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single task",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "404" : {
            "description" : "Task not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Task retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "task" ],
        "summary" : "Update task",
        "description" : "Updates a task",
        "operationId" : "updateTask",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "task name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Task object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Task"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Task updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Task not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Thr update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "task" ],
        "summary" : "Delete task",
        "description" : "Deletes a task",
        "operationId" : "deleteTask",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "task name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Task deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Task not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Task delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/task_characteristics" : {
      "post" : {
        "summary" : "Add a new task characteristic",
        "operationId" : "addTaskCharacteristic",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "task characteristic" ],
        "requestBody" : {
          "description" : "Task Characteristic object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaskCharacteristic"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Task Characteristic created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Task characteristic creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "task characteristic" ],
        "summary" : "Get task characteristics",
        "operationId" : "getTaskCharacteristics",
        "responses" : {
          "200" : {
            "description" : "List of task characteristics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TaskCharacteristic"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Task characteristic retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/task_characteristics/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "task characteristic" ],
        "summary" : "Find task characteristic",
        "description" : "Returns a single task characteristic",
        "operationId" : "getTaskCharacteristicByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "task characteristic name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single task characteristic",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskCharacteristic"
                }
              }
            }
          },
          "404" : {
            "description" : "Task characteristic not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Task characteristic retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "task characteristic" ],
        "summary" : "Update task characteristic",
        "description" : "Updates a task characteristic",
        "operationId" : "updateTaskCharacteristic",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "task characteristic name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Task characteristic object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaskCharacteristic"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Task characteristic updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Task characteristic not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Task characteristic update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "task characteristic" ],
        "summary" : "Delete task characteristic",
        "description" : "Deletes a task characteristic",
        "operationId" : "deleteTaskCharacteristic",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "task characteristic name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Task characteristic deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Task characteristic not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Task characteristic update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/template_assets" : {
      "post" : {
        "summary" : "Add a new template asset",
        "operationId" : "addTemplateAsset",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template asset" ],
        "requestBody" : {
          "description" : "TemplateAsset object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TemplateAsset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Template asset created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Template asset creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template asset" ],
        "summary" : "Get template assets",
        "operationId" : "getTemplateAssets",
        "responses" : {
          "200" : {
            "description" : "List of template assets",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TemplateAsset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Template asset retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/template_assets/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template asset" ],
        "summary" : "Find template asset",
        "description" : "Returns a single template asset",
        "operationId" : "getTemplateAssetByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "template asset name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single template asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateAsset"
                }
              }
            }
          },
          "404" : {
            "description" : "Template asset not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Template asset retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template asset" ],
        "summary" : "Update template asset",
        "description" : "Updates a template asset",
        "operationId" : "updateTemplateAsset",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "template asset name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Template asset object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TemplateAsset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Template asset updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Template asset not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Template asset update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template asset" ],
        "summary" : "Delete template asset",
        "description" : "Deletes a template asset",
        "operationId" : "deleteTemplateAsset",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "template asset name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Template asset deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Template asset not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Template asset delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/template_goals" : {
      "post" : {
        "summary" : "Add a new template goal",
        "operationId" : "addTemplateGoal",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template goal" ],
        "requestBody" : {
          "description" : "TemplateGoal object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TemplateGoal"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Template goal created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Template goal creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template goal" ],
        "summary" : "Get template goals",
        "operationId" : "getTemplateGoals",
        "responses" : {
          "200" : {
            "description" : "List of template goals",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TemplateGoal"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Template goal retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/template_goals/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template goal" ],
        "summary" : "Find template goal",
        "description" : "Returns a single template goal",
        "operationId" : "getTemplateGoalByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "template goal name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single template goal",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateGoal"
                }
              }
            }
          },
          "404" : {
            "description" : "Template goal not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Template goal retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template goal" ],
        "summary" : "Update template goal",
        "description" : "Updates a template goal",
        "operationId" : "updateTemplateAsset",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "template goal name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Template goal object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TemplateGoal"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Template goal updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Template goal set not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Template goal update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template goal" ],
        "summary" : "Delete template goal",
        "description" : "Deletes a template goal",
        "operationId" : "deleteTemplateGoal",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "template goal name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Template goal deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Template goal not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Template goal delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/template_requirements" : {
      "post" : {
        "summary" : "Add a new template requirement",
        "operationId" : "addTemplateRequirement",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template requirement" ],
        "requestBody" : {
          "description" : "TemplateRequirement object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TemplateRequirement"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Template requirement created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Template requirement creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template requirement" ],
        "summary" : "Get template requirements",
        "operationId" : "getTemplateRequirements",
        "responses" : {
          "200" : {
            "description" : "List of template requirements",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TemplateRequirement"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Template requirement retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/template_requirements/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template requirement" ],
        "summary" : "Find template requirement",
        "description" : "Returns a single template requirement",
        "operationId" : "getTemplateRequirementByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "template requirement name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single template requirement",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateRequirement"
                }
              }
            }
          },
          "404" : {
            "description" : "Template requirement not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Template requirement retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template requirement" ],
        "summary" : "Update template requirement",
        "description" : "Updates a template requirement",
        "operationId" : "updateTemplateRequirement",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "template requirement name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Template requirement object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TemplateRequirement"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Template requirement updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Template requirement not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Template requirement update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "template requirement" ],
        "summary" : "Delete template requirement",
        "description" : "Deletes a template requirement",
        "operationId" : "deleteTemplateRequirement",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "template requirement name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Template requirement deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Template requirement not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Template requirement delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/threats" : {
      "post" : {
        "summary" : "Add a new threat",
        "operationId" : "addThreat",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "threat" ],
        "requestBody" : {
          "description" : "Threat object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Threat"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Threat created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Threat creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "threat" ],
        "summary" : "Get threats",
        "operationId" : "getThreats",
        "responses" : {
          "200" : {
            "description" : "List of threats",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Threat"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Threat retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/threats/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "threat" ],
        "summary" : "Find threat",
        "description" : "Returns a single threat",
        "operationId" : "getThreatByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "threat name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single threat",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Threat"
                }
              }
            }
          },
          "404" : {
            "description" : "Threat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Threat retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "threat" ],
        "summary" : "Update threat",
        "description" : "Updates a threat",
        "operationId" : "updateThreat",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "threat name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Threat object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Threat"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Threat updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Threat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Threat update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "threat" ],
        "summary" : "Delete threat",
        "description" : "Deletes a threat",
        "operationId" : "deleteThreat",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "threat name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Threat deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Threat not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Threat delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/traces" : {
      "post" : {
        "summary" : "Add a new trace",
        "operationId" : "addTrace",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "traceability" ],
        "requestBody" : {
          "description" : "Trace object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Trace"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Trace created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Trace creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/traces/dimensions/{dimension_name}/is_from/{is_from}" : {
      "get" : {
        "summary" : "Get manual trace",
        "operationId" : "getTraces",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "traceability" ],
        "parameters" : [ {
          "name" : "dimension_name",
          "in" : "path",
          "description" : "Dimension name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "component", "countermeasure", "document_reference", "domainproperty", "requirement", "role", "task", "usecase", "vulnerability" ]
          }
        }, {
          "name" : "is_from",
          "in" : "path",
          "description" : "Indicates if the trace dimension is on the from end (1) of the traceability link, or the to end (0).",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "enum" : [ 0, 1 ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of traces",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Trace"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Trace retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/traces/environment/{environment_name}" : {
      "get" : {
        "summary" : "Get traces by environment",
        "operationId" : "getTracesByEnvironment",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "traceability" ],
        "parameters" : [ {
          "name" : "environment_name",
          "in" : "path",
          "description" : "Environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of traces",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Trace"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Trace retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/traces/from_type/{from_type}>/from_name/{from_name}/to_type/{to_type}/to_name/{to_name}>" : {
      "delete" : {
        "summary" : "Delete trace",
        "operationId" : "deleteTrace",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "traceability" ],
        "parameters" : [ {
          "name" : "from_type",
          "in" : "path",
          "description" : "Type of object on the from end of the traceability link",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "component", "countermeasure", "domainproperty", "requirement", "task", "usecase" ]
          }
        }, {
          "name" : "from_name",
          "in" : "path",
          "description" : "Name of object on the from end of the traceability link.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "to_type",
          "in" : "path",
          "description" : "Type of object on the to end of the traceability link.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "document_reference", "requirement", "role", "task", "usecase", "vulnerability" ]
          }
        }, {
          "name" : "to_name",
          "in" : "path",
          "description" : "Name of object on the to end of the traceability link.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Manual trace deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Elements of trace not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Trace delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/trust_boundaries" : {
      "post" : {
        "summary" : "Add a new trust boundary",
        "operationId" : "addTrustBoundary",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "trust boundary" ],
        "requestBody" : {
          "description" : "Trust Boundary object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TrustBoundary"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Trust boundary created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Trust boundary creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "trust boundary" ],
        "summary" : "Get trust boundaries",
        "operationId" : "getTrustBoundaries",
        "responses" : {
          "200" : {
            "description" : "List of trust boundaries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TrustBoundary"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Trust boundary retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/trust_boundaries/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "trust boundary" ],
        "summary" : "Find trust boundary",
        "description" : "Returns a single trust boundary",
        "operationId" : "getTrustBoundaryByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "trust boundary name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single trust boundary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TrustBoundary"
                }
              }
            }
          },
          "404" : {
            "description" : "Trust boundary not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Trust boundary retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "trust boundary" ],
        "summary" : "Update trust boundary",
        "description" : "Updates a trust boundary",
        "operationId" : "updateTrustBoundary",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "trust boundary name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Trust boundary object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TrustBoundary"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Trust boundary updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Trust boundary not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Trust boundary update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "trust boundary" ],
        "summary" : "Delete trust boundary",
        "description" : "Deletes a trust boundary",
        "operationId" : "deleteTrustBoundary",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "trust boundary name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Trust boundary deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Trust boundary not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Trust boundary delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/upload/image" : {
      "post" : {
        "summary" : "Upload image",
        "operationId" : "uploadImage",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "import" ],
        "requestBody" : {
          "description" : "Image upload arguments",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImageUploadArguments"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Image uploaded",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Image upload error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Image upload error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/usecases" : {
      "post" : {
        "summary" : "Add a new use case",
        "operationId" : "addUseCase",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "use case" ],
        "requestBody" : {
          "description" : "Use case object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UseCase"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Use case created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Use case creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "use case" ],
        "summary" : "Get use cases",
        "operationId" : "getUseCases",
        "responses" : {
          "200" : {
            "description" : "List of use cases",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UseCase"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Use case retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/usecases/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "use case" ],
        "summary" : "Find use case",
        "description" : "Returns a single use case",
        "operationId" : "getUseCaseByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "use case name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single use case",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UseCase"
                }
              }
            }
          },
          "404" : {
            "description" : "Use case not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Use case retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "use case" ],
        "summary" : "Update use case",
        "description" : "Updates a use case",
        "operationId" : "updateUseCase",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "use case name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Use case object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UseCase"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Use case updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Use case not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Use case update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "use case" ],
        "summary" : "Delete use case",
        "description" : "Deletes a use case",
        "operationId" : "deleteUseCase",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "use case name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Use case deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Use case not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Use case delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/validation/environment/{environment_name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "validation" ],
        "summary" : "Run validation check",
        "description" : "Returns validation results",
        "operationId" : "modelValidation",
        "parameters" : [ {
          "name" : "environment_name",
          "in" : "path",
          "description" : "environment name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Validation results",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ValidationResult"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Environment not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Validation check error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/value_types" : {
      "post" : {
        "summary" : "Add a new value type",
        "operationId" : "addValueType",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "value type" ],
        "requestBody" : {
          "description" : "ValueType object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ValueType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "ValueType created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "ValueType creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/value_types/type/{value_type}/environment/{environment_name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "value type" ],
        "summary" : "Get value types",
        "operationId" : "getValueTypes",
        "parameters" : [ {
          "name" : "value_type",
          "in" : "path",
          "description" : "value type name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environment_name",
          "in" : "path",
          "description" : "Environment name, or 'all' if not relevant for this value type.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of value types",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ValueType"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "ValueType retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/value_types/type/{value_type}/environment/{environment_name}/name/{object_name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "value type" ],
        "summary" : "Find value type",
        "description" : "Returns a single value type",
        "operationId" : "getValueTypeByName",
        "parameters" : [ {
          "name" : "value_type",
          "in" : "path",
          "description" : "value type name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environment_name",
          "in" : "path",
          "description" : "Environment name, or 'all' if not relevant for this value type.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "object_name",
          "in" : "path",
          "description" : "Value type object name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single value type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValueType"
                }
              }
            }
          },
          "404" : {
            "description" : "Value type not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Value typr retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "value type" ],
        "summary" : "Update value type",
        "description" : "Updates a value type",
        "operationId" : "updateValueType",
        "parameters" : [ {
          "name" : "value_type",
          "in" : "path",
          "description" : "value type name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environment_name",
          "in" : "path",
          "description" : "Environment name, or 'all' if not relevant for this value type.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "object_name",
          "in" : "path",
          "description" : "Value type object name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "ValueType object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ValueType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Value type updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Value type not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Value type update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "value type" ],
        "summary" : "Delete value type",
        "description" : "Deletes a value type",
        "operationId" : "deleteValueType",
        "parameters" : [ {
          "name" : "value_type",
          "in" : "path",
          "description" : "value type name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environment_name",
          "in" : "path",
          "description" : "Environment name, or 'all' if not relevant for this value type.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "object_name",
          "in" : "path",
          "description" : "Value type object name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Value type deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Value type not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Value type delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/vulnerabilities" : {
      "post" : {
        "summary" : "Add a new vulnerability",
        "operationId" : "addVulnerability",
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "vulnerability" ],
        "requestBody" : {
          "description" : "Vulnerability object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Vulnerability"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Vulnerability created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Vulnerability creation error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "vulnerability" ],
        "summary" : "Get vulnerabilities",
        "operationId" : "getVulnerabilities",
        "responses" : {
          "200" : {
            "description" : "List of vulnerabilities",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Vulnerability"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Vulnerability retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/vulnerabilities/name/{name}" : {
      "get" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "vulnerability" ],
        "summary" : "Find vulnerability",
        "description" : "Returns a single vulnerability",
        "operationId" : "getVulnerabilityByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "vulnerability name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Single vulnerability",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Vulnerability"
                }
              }
            }
          },
          "404" : {
            "description" : "Vulnerability not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Vulnerability retrieval error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "vulnerability" ],
        "summary" : "Update vulnerability",
        "description" : "Updates a vulnerability",
        "operationId" : "updateVulnerability",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "vulnerability name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Vulnerability object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Vulnerability"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Vulnerability updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Vulnerability not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Vulnerability update error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "cairisAuth" : [ ]
        } ],
        "tags" : [ "vulnerability" ],
        "summary" : "Delete vulnerability",
        "description" : "Deletes a vulnerability",
        "operationId" : "deleteVulnerability",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "vulnerability name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Vulnerability deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpectedMessage"
                }
              }
            }
          },
          "404" : {
            "description" : "Vulnerability not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Vulnerability delete error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          },
          "500" : {
            "description" : "Unknown error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnexpectedMessage"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AcceptEnvironmentProperties" : {
        "required" : [ "theEnvironmentName", "theCost", "theRationale" ],
        "properties" : {
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "Name of the environment these response properties are specific to.",
            "example" : "Stroke"
          },
          "theCost" : {
            "type" : "string",
            "enum" : [ "Low", "Medium", "High" ],
            "description" : "Level of cost for accepting the consequences of the risk given the environment.",
            "example" : "Low"
          },
          "theRationale" : {
            "type" : "string",
            "description" : "Justification for accepting the risk in this environment.",
            "example" : "None"
          }
        }
      },
      "ArchitecturalPattern" : {
        "required" : [ "theName", "theSynopsis", "theComponents", "theConnectors" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Architectural Pattern name",
            "example" : "Context Policy Management"
          },
          "theSynopsis" : {
            "type" : "string",
            "description" : "A synopsis of the architectural pattern.",
            "example" : "Model illustrating context specific policy management with XACML."
          },
          "theComponents" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Component"
            },
            "description" : "List of components associated with this architectural pattern.",
            "example" : [ {
              "theDescription" : "XACML based policy manager component.",
              "theStructure" : [ {
                "theHeadRole" : "",
                "theTailAdornment" : "Association",
                "theTailNav" : 1,
                "theHeadAsset" : "Decision Wrapper",
                "theHeadNry" : "1",
                "theTailRole" : "",
                "theHeadAdornment" : "Association",
                "theHeadNav" : 0,
                "theTailAsset" : "Access Request",
                "theTailNry" : "1..*"
              }, {
                "theHeadRole" : "",
                "theTailAdornment" : "Association",
                "theTailNav" : 1,
                "theHeadAsset" : "Decision Wrapper",
                "theHeadNry" : "1",
                "theTailRole" : "",
                "theHeadAdornment" : "Association",
                "theHeadNav" : 0,
                "theTailAsset" : "Access Manager",
                "theTailNry" : "1"
              }, {
                "theHeadRole" : "",
                "theTailAdornment" : "Association",
                "theTailNav" : 1,
                "theHeadAsset" : "Access Manager",
                "theHeadNry" : "1",
                "theTailRole" : "",
                "theHeadAdornment" : "Composition",
                "theHeadNav" : 0,
                "theTailAsset" : "DHDF Engine",
                "theTailNry" : "1"
              }, {
                "theHeadRole" : "",
                "theTailAdornment" : "Association",
                "theTailNav" : 1,
                "theHeadAsset" : "DHDF Engine",
                "theHeadNry" : "1",
                "theTailRole" : "",
                "theHeadAdornment" : "Association",
                "theHeadNav" : 0,
                "theTailAsset" : "Data Reader",
                "theTailNry" : "1"
              }, {
                "theHeadRole" : "",
                "theTailAdornment" : "Association",
                "theTailNav" : 1,
                "theHeadAsset" : "Access Manager",
                "theHeadNry" : "1",
                "theTailRole" : "",
                "theHeadAdornment" : "Association",
                "theHeadNav" : 0,
                "theTailAsset" : "PDP Cache",
                "theTailNry" : "1"
              }, {
                "theHeadRole" : "",
                "theTailAdornment" : "Association",
                "theTailNav" : 1,
                "theHeadAsset" : "Data Reader",
                "theHeadNry" : "*",
                "theTailRole" : "",
                "theHeadAdornment" : "Association",
                "theHeadNav" : 0,
                "theTailAsset" : "Request Context",
                "theTailNry" : "*"
              }, {
                "theHeadRole" : "",
                "theTailAdornment" : "Association",
                "theTailNav" : 0,
                "theHeadAsset" : "PDP Cache",
                "theHeadNry" : "*",
                "theTailRole" : "loads",
                "theHeadAdornment" : "Aggregation",
                "theHeadNav" : 1,
                "theTailAsset" : "Policy File",
                "theTailNry" : "1..*"
              }, {
                "theHeadRole" : "",
                "theTailAdornment" : "Association",
                "theTailNav" : 0,
                "theHeadAsset" : "Application Data",
                "theHeadNry" : "*",
                "theTailRole" : "",
                "theHeadAdornment" : "Inheritance",
                "theHeadNav" : 0,
                "theTailAsset" : "Access Request",
                "theTailNry" : "1"
              } ],
              "theInterfaces" : [ {
                "thePrivilege" : "normal",
                "theAccessRight" : "trusted",
                "theType" : "provided",
                "theName" : "enforceRequest"
              } ],
              "theName" : "Policy Manager",
              "theRequirements" : [ ],
              "theGoalAssociations" : [ {
                "theRationale" : "",
                "theRefType" : "and",
                "theGoalName" : "Qualified data use",
                "theSubGoalName" : "Usage Constraint"
              }, {
                "theRationale" : "",
                "theRefType" : "and",
                "theGoalName" : "Qualified data use",
                "theSubGoalName" : "Usage Request"
              }, {
                "theRationale" : "",
                "theRefType" : "and",
                "theGoalName" : "Usage Request",
                "theSubGoalName" : "Data Usage Request"
              }, {
                "theRationale" : "",
                "theRefType" : "and",
                "theGoalName" : "Usage Request",
                "theSubGoalName" : "Mandated request"
              }, {
                "theRationale" : "",
                "theRefType" : "and",
                "theGoalName" : "Permissive default policy",
                "theSubGoalName" : "Messaging authentication"
              }, {
                "theRationale" : "",
                "theRefType" : "and",
                "theGoalName" : "Policy file validation",
                "theSubGoalName" : "Specified resource"
              }, {
                "theRationale" : "",
                "theRefType" : "and",
                "theGoalName" : "Policy management secrecy",
                "theSubGoalName" : "Secret request enforcement channel"
              }, {
                "theRationale" : "",
                "theRefType" : "and",
                "theGoalName" : "Restricted request specifications",
                "theSubGoalName" : "Access request validation"
              }, {
                "theRationale" : "",
                "theRefType" : "and",
                "theGoalName" : "Restricted request specifications",
                "theSubGoalName" : "Canonical request specification"
              }, {
                "theRationale" : "",
                "theRefType" : "and",
                "theGoalName" : "Restricted resource",
                "theSubGoalName" : "User identifier permission"
              }, {
                "theRationale" : "",
                "theRefType" : "and",
                "theGoalName" : "Specified resource",
                "theSubGoalName" : "Restricted request specifications"
              }, {
                "theRationale" : "",
                "theRefType" : "and",
                "theGoalName" : "Specified resource",
                "theSubGoalName" : "Restricted resource"
              }, {
                "theRationale" : "None",
                "theRefType" : "responsible",
                "theGoalName" : "Restricted request specifications",
                "theSubGoalName" : "Developer of webinos Apps"
              }, {
                "theRationale" : "None",
                "theRefType" : "responsible",
                "theGoalName" : "Restricted resource",
                "theSubGoalName" : "Developer of webinos Apps"
              }, {
                "theRationale" : "None",
                "theRefType" : "responsible",
                "theGoalName" : "Specified resource",
                "theSubGoalName" : "Developer of webinos Apps"
              }, {
                "theRationale" : "None",
                "theRefType" : "responsible",
                "theGoalName" : "Policy file validation",
                "theSubGoalName" : "Developer of webinos Platform"
              }, {
                "theRationale" : "None",
                "theRefType" : "responsible",
                "theGoalName" : "Policy management secrecy",
                "theSubGoalName" : "Developer of webinos Platform"
              }, {
                "theRationale" : "None",
                "theRefType" : "responsible",
                "theGoalName" : "Data Usage Request",
                "theSubGoalName" : "Developer of webinos Apps"
              }, {
                "theRationale" : "None",
                "theRefType" : "responsible",
                "theGoalName" : "Access request validation",
                "theSubGoalName" : "Developer of webinos Platform"
              }, {
                "theRationale" : "None",
                "theRefType" : "responsible",
                "theGoalName" : "Canonical request specification",
                "theSubGoalName" : "Developer of webinos Platform"
              }, {
                "theRationale" : "None",
                "theRefType" : "responsible",
                "theGoalName" : "Secret request enforcement channel",
                "theSubGoalName" : "Developer of webinos Platform"
              } ],
              "theGoals" : [ "Access request validation", "API control", "Canonical request specification", "Context-sensitive access control", "Data Usage Request", "Device policy", "Mandated request", "Messaging authentication", "Permissive default policy", "Policy file validation", "Policy management secrecy", "Policy synchronisation", "Qualified data use", "Restricted request specifications", "Restricted resource", "Secret request enforcement channel", "Specified resource", "Usage Constraint", "Usage Request", "User identifier permission" ]
            } ]
          },
          "theConnectors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Connector"
            },
            "description" : "The architectural pattern connectors",
            "example" : [ {
              "theToInterface" : "enforceRequest",
              "theToRole" : "provide-permission",
              "theAssetName" : "Access Request",
              "theFromComponent" : "Context Manager",
              "theFromRole" : "request-permission",
              "theAccessRight" : "trusted",
              "theFromInterface" : "enforceRequest",
              "theConnectorName" : "permission",
              "theToComponent" : "Policy Manager",
              "theProtocol" : "TLS"
            } ]
          }
        }
      },
      "Asset" : {
        "required" : [ "theName", "theType", "theShortCode", "theDescription", "theSignificance", "theEnvironmentProperties", "isCritical", "theTags" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Asset name",
            "example" : "Clinical Data"
          },
          "theType" : {
            "type" : "string",
            "enum" : [ "Hardware", "Information", "People", "Software", "Systems" ],
            "description" : "Type of asset",
            "example" : "Information"
          },
          "theShortCode" : {
            "type" : "string",
            "description" : "Short code for asset",
            "example" : "CD"
          },
          "theDescription" : {
            "type" : "string",
            "description" : "Asset description",
            "example" : "Clinical Data"
          },
          "theSignificance" : {
            "type" : "string",
            "description" : "Summary of the asset's significance.",
            "example" : "Unanonymised and in the wrong hands, this data can be very damaging."
          },
          "theEnvironmentProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AssetEnvironmentProperties"
            },
            "description" : "Environment specific asset properties",
            "example" : [ {
              "theEnvironmentName" : "Psychosis",
              "theAssociations" : [ [ "0", "Association", "*", "", "", "*", 0, "Workflow" ] ],
              "theProperties" : [ {
                "name" : "Confidentiality",
                "value" : "Low",
                "rationale" : "Clinical data is fully anonymised."
              }, {
                "name" : "Integrity",
                "value" : "None",
                "rationale" : "None"
              }, {
                "name" : "Availability",
                "value" : "None",
                "rationale" : "None"
              }, {
                "name" : "Accountability",
                "value" : "None",
                "rationale" : "None"
              }, {
                "name" : "Anonymity",
                "value" : "None",
                "rationale" : "None"
              }, {
                "name" : "Pseudonymity",
                "value" : "None",
                "rationale" : "None"
              }, {
                "name" : "Unlinkability",
                "value" : "None",
                "rationale" : "None"
              }, {
                "name" : "Unobservability",
                "value" : "None",
                "rationale" : "None"
              } ]
            } ]
          },
          "isCritical" : {
            "type" : "integer",
            "description" : "Set to 1 if the asset is critical, i.e. any threat or vulnerability to this asset in an environment maximises the related risk score.",
            "example" : 0
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags",
            "example" : [ "tag1", "tag2" ]
          },
          "theCriticalRationale" : {
            "type" : "string",
            "description" : "If isCritical is set then this description provides a justification for the criticality.",
            "example" : "TBC"
          },
          "theInterfaces" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Interface"
            },
            "description" : "Known interfaces to the asset.",
            "example" : [ [ {
              "theInterfaceName" : "if1",
              "theInterfaceType" : "provided",
              "theAccessRight" : "anonymous",
              "thePrivilege" : "normal"
            } ] ]
          }
        }
      },
      "AssetAssociation" : {
        "required" : [ "theEnvironmentName", "theHeadAsset", "theHeadType", "theHeadNavigation", "theHeadMultiplicity", "theHeadRole", "theTailRole", "theTailMultiplicity", "theTailType", "theTailNavigation", "theTailAsset", "theRationale" ],
        "properties" : {
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "Environment the association is situated in.",
            "example" : "Psychosis"
          },
          "theHeadAsset" : {
            "type" : "string",
            "description" : "Head asset name",
            "example" : "Workflow"
          },
          "theHeadType" : {
            "type" : "string",
            "description" : "Association type (head)",
            "enum" : [ "Inheritence", "Association", "Aggregation", "Composition", "Dependency" ],
            "example" : "Association"
          },
          "theHeadNavigation" : {
            "type" : "integer",
            "enum" : [ 0, 1 ],
            "example" : 0
          },
          "theHeadMultiplicity" : {
            "type" : "string",
            "description" : "Association multiplicity (head)",
            "enum" : [ "1", "*", "1..*" ],
            "example" : "*"
          },
          "theHeadRole" : {
            "type" : "string",
            "description" : "UML role associated with association head",
            "example" : "None"
          },
          "theTailRole" : {
            "type" : "string",
            "description" : "UML role associated with association tail",
            "example" : "None"
          },
          "theTailMultiplicity" : {
            "type" : "string",
            "description" : "Association multiplicity (tail)",
            "enum" : [ "1", "*", "1..*" ],
            "example" : "1..*"
          },
          "theTailType" : {
            "type" : "string",
            "description" : "Association type (tail)",
            "enum" : [ "Inheritence", "Association", "Aggregation", "Composition", "Dependency" ],
            "example" : "Association"
          },
          "theTailNavigation" : {
            "type" : "integer",
            "enum" : [ 0, 1 ],
            "example" : 0
          },
          "theTailAsset" : {
            "type" : "string",
            "description" : "Tail asset name",
            "example" : "Clinical data"
          },
          "theRationale" : {
            "type" : "string",
            "description" : "Design rationale for this asset association",
            "example" : "Workflows contain one or more pieces of clinical data"
          }
        }
      },
      "AssetEnvironmentProperties" : {
        "required" : [ "theEnvironmentName", "theAssociations", "theProperties" ],
        "properties" : {
          "theEnvironmentName" : {
            "type" : "string",
            "example" : "Psychosis"
          },
          "theProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SecurityAttribute"
            },
            "minItems" : 8,
            "maxItems" : 8,
            "description" : "The security properties of the asset that need to be protected in this environment.",
            "example" : [ {
              "name" : "Confidentiality",
              "value" : "Low",
              "rationale" : "Clinical data is fully anonymised."
            }, {
              "name" : "Integrity",
              "value" : "None",
              "rationale" : "None"
            }, {
              "name" : "Availability",
              "value" : "None",
              "rationale" : "None"
            }, {
              "name" : "Accountability",
              "value" : "None",
              "rationale" : "None"
            }, {
              "name" : "Anonymity",
              "value" : "None",
              "rationale" : "None"
            }, {
              "name" : "Pseudonymity",
              "value" : "None",
              "rationale" : "None"
            }, {
              "name" : "Unlinkability",
              "value" : "None",
              "rationale" : "None"
            }, {
              "name" : "Unobservability",
              "value" : "None",
              "rationale" : "None"
            } ]
          },
          "theAssociations" : {
            "type" : "array",
            "description" : "associations associated with this asset, where the asset is the head of the qssociation.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "example" : [ [ "0", "Association", "*", "", "", "*", 0, "Workflow" ] ]
          }
        }
      },
      "Attacker" : {
        "required" : [ "theName", "theImage", "theDescription", "theTags", "theEnvironmentProperties" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Attacker name",
            "example" : "Carol"
          },
          "theImage" : {
            "type" : "string",
            "description" : "Name of the attacker avatar image file.  This should be in the CAIRIS server's image directory.",
            "example" : "Carol.jpg"
          },
          "theDescription" : {
            "type" : "string",
            "description" : "Attacker description",
            "example" : "Carol is a freelance journalist working in the South East of England.  Having heard stories about data theft, she is currently investigating a number of e-Science projects, including NeuroGrid, to see if she can find a story."
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags",
            "example" : [ ]
          },
          "theEnvironmentProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AttackerEnvironmentProperties"
            },
            "description" : "Environment specific attacker properties",
            "example" : [ {
              "theMotives" : [ "Headlines/press" ],
              "theRoles" : [ "Social Engineer" ],
              "theCapabilities" : [ {
                "name" : "Resources/Personnel and Time",
                "value" : "Medium"
              }, {
                "name" : "Resources/Funding",
                "value" : "Low"
              } ],
              "theEnvironmentName" : "Psychosis"
            } ]
          }
        }
      },
      "AttackerEnvironmentProperties" : {
        "required" : [ "theEnvironmentName", "theMotives", "theCapabilities", "theRoles" ],
        "properties" : {
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "Name of the environment the attacker is situated in.",
            "example" : "Psychosis"
          },
          "theMotives" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Accident", "Cyber-extortion", "Cyber-tagging", "Data destruction", "Data modification", "Data theft", "Defamation", "Disruption", "Fraud", "Hactivism", "Headlines/pressImproved esteem", "Improved organisational position", "Indifference", "Money", "Network resource theft", "Productivity", "Revenge", "System resource theft", "Thrill-seeking" ]
            },
            "description" : "Attacker motivations",
            "example" : [ "Headlines/press" ]
          },
          "theCapabilities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Capability"
            }
          }
        }
      },
      "Capability" : {
        "required" : [ "name", "value" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "enum" : [ "Knowledge/Books and Manuals", "Knowledge/Education and Training", "Knowledge/Methods", "Resources/Equipment", "Resources/Facilities", "Resources/Funding", "Resources/Personnel and Time", "Software", "Technology" ],
            "description" : "Attacker capability",
            "example" : "Resources/Funding"
          },
          "value" : {
            "type" : "string",
            "enum" : [ "Low", "Medium", "High" ],
            "description" : "Level of attacker capability",
            "example" : "Low"
          }
        }
      },
      "CharacteristicReference" : {
        "required" : [ "theReferenceName", "theCharacteristicType", "theReferenceDescription", "theDimensionName", "theReferenceSynopsis", "theReferenceContribution" ],
        "properties" : {
          "theReferenceName" : {
            "type" : "string",
            "description" : "Name of the reference that forms the basis of this characteristic reference.",
            "example" : "Frequently around contact network."
          },
          "theCharacteristicType" : {
            "type" : "string",
            "enum" : [ "grounds", "warrant", "rebuttal" ],
            "description" : "Indicates whether this reference contributes to a characteristic's grounds, warrant, or rebuttal.",
            "example" : "grounds"
          },
          "theReferenceDescriptoin" : {
            "type" : "string",
            "description" : "Extract from the source text, concept or elaborated information that justifies this reference's basis as a ground, warrant, or rebuttal.",
            "example" : "... the webinos system determines the current context of device A, and finds a device B in the immediate vicinity..."
          },
          "theDimensionName" : {
            "type" : "string",
            "enum" : [ "document", "asset", "attacker", "countermeasure", "domainproperty", "environment", "goal", "misusecase", "obstacle", "persona", "requirement", "response", "risk", "role", "task", "threat", "usecase", "vulnerability" ],
            "description" : "The type of reference.  For document references, this will be 'document'.  For concept references, this will be one of the other values.",
            "example" : "document"
          },
          "theReferenceSynposis" : {
            "$ref" : "#/components/schemas/ReferenceSynopsis"
          },
          "theReferenceContribution" : {
            "$ref" : "#/components/schemas/ReferenceContribution"
          }
        }
      },
      "Component" : {
        "required" : [ "theName", "theDescription", "theInterfaces", "theStructure", "theRequirements", "theGoals", "theGoalAssociations" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Component name",
            "example" : "Policy Manager"
          },
          "theDescription" : {
            "type" : "string",
            "description" : "Component description",
            "example" : "XACML based policy manager component"
          },
          "theInterfaces" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ComponentInterface"
            },
            "description" : "Component interfaces",
            "example" : [ {
              "thePrivilege" : "normal",
              "theAccessRight" : "trusted",
              "theType" : "provided",
              "theName" : "enforceRequest"
            } ]
          },
          "theStructure" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ComponentStructure"
            }
          },
          "theRequirements" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Names of template requirements that specify the component's functionality or qualities.",
            "example" : [ ]
          },
          "theGoals" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Names of the template goals that specify the component's functionality of qualities.",
            "example" : [ "Qualified data use", "Usage Constraint", "Usage Request" ]
          },
          "theGoalAssociations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ComponentGoalAssociation"
            },
            "description" : "Associations between template goals associated with this component.",
            "example" : [ {
              "theRationale" : "",
              "theRefType" : "and",
              "theGoalName" : "Qualified data use",
              "theSubGoalName" : "Usage Constraint"
            }, {
              "theRationale" : "",
              "theRefType" : "and",
              "theGoalName" : "Qualified data use",
              "theSubGoalName" : "Usage Request"
            } ]
          }
        }
      },
      "ComponentGoalAssociation" : {
        "required" : [ "theGoalName", "theRefType", "theSubGoalName", "theRationale" ],
        "properties" : {
          "theGoalName" : {
            "type" : "string",
            "description" : "Name of head template goal in association.",
            "example" : "Qualified data use"
          },
          "theRefType" : {
            "type" : "string",
            "enum" : [ "and", "or", "responsible" ],
            "description" : "Type of template goal association",
            "example" : "and"
          },
          "theSubGoalName" : {
            "type" : "string",
            "description" : "Name of tail template goal in association.",
            "example" : "Usage Constraint"
          }
        }
      },
      "ComponentInterface" : {
        "required" : [ "theName", "theType", "theAccessRight", "thePrivilege" ],
        "properties" : {
          "theInterfaceName" : {
            "type" : "string",
            "example" : "enforceRequest"
          },
          "theInterfaceType" : {
            "type" : "string",
            "enum" : [ "provided", "required" ],
            "example" : "provided"
          },
          "theAccessRight" : {
            "type" : "string",
            "example" : "trusted"
          },
          "thePrivilege" : {
            "type" : "string",
            "example" : "normal"
          }
        }
      },
      "ComponentStructure" : {
        "required" : [ "theHeadAsset", "theHeadAdornment", "theHeadNav", "theHeadNry", "theHeadRole", "theTailRole", "theTailNry", "theTailNav", "theTailAdornment", "theTailAsset" ],
        "properties" : {
          "theHeadAsset" : {
            "type" : "string",
            "description" : "Name of template asset at the head of the association",
            "example" : "Decision Wrapper"
          },
          "theHeadAdornment" : {
            "type" : "string",
            "enum" : [ "Inheritence", "Association", "Aggregation", "Composition", "Dependency" ],
            "description" : "Type of template asset association at the head end of the association",
            "example" : "Association"
          },
          "theHeadNav" : {
            "type" : "integer",
            "enum" : [ 0, 1 ],
            "description" : "Indicates (1) whether head template asset visible to the tail template asset.",
            "example" : 0
          },
          "theHeadNry" : {
            "type" : "string",
            "enum" : [ "1", "*", "1..*" ],
            "description" : "Association multiplicity (head)",
            "example" : "1"
          },
          "theHeadRole" : {
            "type" : "string",
            "description" : "Indicates the role associated with the head end of the association.",
            "example" : ""
          },
          "theTailRole" : {
            "type" : "string",
            "description" : "Indicates the role associated with the tail end of the association.",
            "example" : ""
          },
          "theTailNry" : {
            "type" : "string",
            "enum" : [ "1", "*", "1..*" ],
            "description" : "Association multiplicity (tail)"
          },
          "theTailNav" : {
            "type" : "integer",
            "enum" : [ 0, 1 ],
            "description" : "Indicates (1) whether tail template asset visible to the head template asset.",
            "example" : 1
          },
          "theTailAdornment" : {
            "type" : "string",
            "enum" : [ "Inheritence", "Association", "Aggregation", "Composition", "Dependency" ],
            "description" : "Type of template asset association at the tail end of the association",
            "example" : "Association"
          },
          "theTailAsset" : {
            "type" : "string",
            "description" : "Name of template asset at the tail end of the association."
          }
        }
      },
      "ConceptReference" : {
        "required" : [ "theName", "theDimName", "theObjName", "theDescription" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Name of the concept reference",
            "example" : "Acknowledge target device"
          },
          "theDimName" : {
            "type" : "string",
            "enum" : [ "persona", "requirement", "task", "usecase" ],
            "description" : "Type of concept.",
            "example" : "usecase"
          },
          "theObjName" : {
            "type" : "string",
            "description" : "Name of concept.",
            "example" : "Installation and update of webinos application."
          },
          "theDescription" : {
            "type" : "string",
            "description" : "Extract from the concept that forms the basis of the concept reference.",
            "example" : "TBC"
          }
        }
      },
      "ConcernAssociation" : {
        "required" : [ "theSource", "theSourceNry", "theLinkVerb", "theTargetNry", "theTarget" ],
        "properties" : {
          "theSource" : {
            "type" : "string",
            "description" : "The asset name at the head end of the associated asset association",
            "example" : "Access Control Policy"
          },
          "theSourceNry" : {
            "type" : "string",
            "enum" : [ "1", "*", "1..*" ],
            "description" : "The multiplicity at the head end of the associated asset association.",
            "example" : "1"
          },
          "theLinkVerb" : {
            "type" : "string",
            "description" : "The verb characterising the association role",
            "example" : ""
          },
          "theTargetNry" : {
            "type" : "string",
            "enum" : [ "1", "*", "1..*" ],
            "description" : "The multiplicity at the tail end of associated asset association.",
            "example" : "1..*"
          },
          "theTarget" : {
            "type" : "string",
            "description" : "The asset name at the tail end of the associated asset association.",
            "example" : "Analysis Data"
          }
        }
      },
      "Connector" : {
        "required" : [ "theConnectorName", "theFromComponent", "theFromRole", "theFromInterface", "theToComponent", "theToInterface", "theToRole", "theAssetName", "theProtocol", "theAccessRight" ],
        "properties" : {
          "theConnectorName" : {
            "type" : "string",
            "description" : "Connector name",
            "example" : "permission"
          },
          "theFromComponent" : {
            "type" : "string",
            "description" : "Name of the component on the from end of the connector",
            "example" : "Context Manager"
          },
          "theFromRole" : {
            "type" : "string",
            "description" : "The role played by the component on the from end of the connector",
            "example" : "request-permission"
          },
          "theFromInterface" : {
            "type" : "string",
            "description" : "Name of the interface used by the component on the from end of the connector",
            "example" : "enforceRequest"
          },
          "theToComponent" : {
            "type" : "string",
            "description" : "Name of the component on the to end of the connector",
            "example" : "Policy Manager"
          },
          "theToInterface" : {
            "type" : "string",
            "description" : "Name of the interface used by the component on the to end of the connector",
            "example" : "enforceRequest"
          },
          "theToRole" : {
            "type" : "string",
            "description" : "The role played by the component on the to end of the connector",
            "example" : "provide-permission"
          },
          "theAssetName" : {
            "type" : "string",
            "description" : "The name of the template asset transferred between components on the connector.",
            "example" : "Access Request"
          },
          "theProtocol" : {
            "type" : "string",
            "description" : "The protocol used by the connector",
            "example" : "TLS"
          },
          "theAccessRight" : {
            "type" : "string",
            "description" : "The access right level needed to interact with the connector",
            "example" : "trusted"
          }
        }
      },
      "Countermeasure" : {
        "required" : [ "theName", "theDescription", "theType", "theTags", "theEnvironmentProperties" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Countermeasure name",
            "example" : "Location-based X509 extension"
          },
          "theDescription" : {
            "type" : "string",
            "description" : "Countermeasure description",
            "example" : "X.509 certificates extended to tie client workstations so NeuroGrid tasks can only be carried out on these."
          },
          "theType" : {
            "type" : "string",
            "enum" : [ "Information", "Systems", "Software", "Hardware", "People" ],
            "description" : "Type of countermeasure.",
            "example" : "Information"
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags",
            "example" : [ ]
          },
          "theEnvironmentProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CountermeasureEnvironmentProperties"
            },
            "description" : "Environment specific countermeasure properties",
            "example" : [ {
              "theEnvironmentName" : "Psychosis",
              "thePersonas" : [ {
                "thePersona" : "Claire",
                "theFrequency" : "None",
                "theDemands" : "None",
                "theGoalConflict" : "Low Hindrance",
                "theTask" : "Upload data",
                "theDuration" : "None"
              }, {
                "thePersona" : "Claire",
                "theFrequency" : "None",
                "theDemands" : "None",
                "theGoalConflict" : "Low Hindrance",
                "theTask" : "Download data",
                "theDuration" : "None"
              } ],
              "theCost" : "Medium",
              "theRationale" : [ "None", "None", "None", "None", "None", "None", "None", "None" ],
              "theTargets" : [ {
                "theRationale" : "Discourages certificate sharing",
                "theEffectiveness" : "High",
                "theName" : "Certificate ubiquity"
              } ],
              "theRoles" : [ "Data Consumer", "Certificate Authority" ],
              "theRequirements" : [ "User certificate" ],
              "theProperties" : [ {
                "value" : "None",
                "name" : "Confidentiality",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Integrity",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Availability",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Accountability",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Anonymity",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Pseudonymity",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Unlinkability",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Unobservability",
                "rationale" : "None"
              } ]
            }, {
              "theEnvironmentName" : "Stroke",
              "thePersonas" : [ {
                "thePersona" : "Tom",
                "theFrequency" : "None",
                "theDemands" : "Medium Hindrance",
                "theGoalConflict" : "Medium Hindrance",
                "theTask" : "Upload data",
                "theDuration" : "None"
              }, {
                "thePersona" : "Tom",
                "theFrequency" : "None",
                "theDemands" : "None",
                "theGoalConflict" : "None",
                "theTask" : "Download data",
                "theDuration" : "None"
              } ],
              "theCost" : "Medium",
              "theTargets" : [ {
                "theRationale" : "Discourages certificate sharing",
                "theEffectiveness" : "High",
                "theName" : "Certificate ubiquity"
              } ],
              "theRoles" : [ "Data Consumer", "Certificate Authority" ],
              "theRequirements" : [ "User certificate" ],
              "theProperties" : [ {
                "value" : "None",
                "name" : "Confidentiality",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Integrity",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Availability",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Accountability",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Anonymity",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Pseudonymity",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Unlinkability",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Unobservability",
                "rationale" : "None"
              } ]
            } ]
          }
        }
      },
      "CountermeasureEnvironmentProperties" : {
        "required" : [ "theEnvironmentName", "theCost", "thePersonas", "theProperties", "theRequirements", "theRoles", "theTargets" ],
        "properties" : {
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "Name of the environment these countermeasure properties are specific to.",
            "example" : "Psychosis"
          },
          "theCost" : {
            "type" : "string",
            "enum" : [ "Low", "Medium", "High" ],
            "description" : "Level of cost of the countermeasure to the roles responsible for it in this environment.",
            "example" : "Medium"
          },
          "thePersonas" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PersonaCountermeasureCharacteristic"
            },
            "description" : "The impact of the countermeasure on personas and tasks in the environment.",
            "example" : [ {
              "thePersona" : "Tom",
              "theFrequency" : "None",
              "theDemands" : "Medium Hindrance",
              "theGoalConflict" : "Medium Hindrance",
              "theTask" : "Upload data",
              "theDuration" : "None"
            } ]
          },
          "theProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SecurityAttribute"
            },
            "minItems" : 8,
            "maxItems" : 8,
            "description" : "The security properties fostered as a result of this countermeasure's presence in the environment.",
            "example" : [ {
              "value" : "None",
              "name" : "Confidentiality",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Integrity",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Availability",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Accountability",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Anonymity",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Pseudonymity",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Unlinkability",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Unobservability",
              "rationale" : "None"
            } ]
          },
          "theRequirements" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The name of the requirements that specify or constrain the countermeasure in this environment.  These requirements are refinements of goals originating from risk responses.",
            "example" : [ "User certificate" ]
          },
          "theRoles" : {
            "type" : "string",
            "items" : {
              "type" : "string"
            },
            "description" : "The name of the roles with responsibility for the countermeasure in this environment."
          },
          "theTargets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CountermeasureTarget"
            },
            "description" : "Details of how the countermeasure target's the associated risk's threat or vulnerability in this environment.",
            "example" : [ {
              "theRationale" : "Discourages certificate sharing",
              "theEffectiveness" : "High",
              "theName" : "Certificate ubiquity"
            } ]
          }
        }
      },
      "CountermeasureTarget" : {
        "required" : [ "theName", "theEffectiveness", "theRationale" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Name of the threat or vulnerability targeted by the countermeasure.",
            "example" : "Certificate ubiquity"
          },
          "theEffectiveness" : {
            "type" : "string",
            "enum" : [ "None", "Low", "Medium", "High" ],
            "description" : "An indication of how effective the countermeasure is at treating the target.",
            "example" : "High"
          },
          "theRationale" : {
            "type" : "string",
            "description" : "Justification for the target effectiveness value.",
            "example" : "Discourages certificate sharing."
          }
        }
      },
      "DataFlow" : {
        "required" : [ "theName", "theEnvironmentName", "theFromType", "theFromName", "theToType", "theToName", "theAssets" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Data flow name",
            "example" : "failure event"
          },
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "Environment this data flow is specific to.",
            "example" : "Day"
          },
          "theFromType" : {
            "type" : "string",
            "enum" : [ "entity", "datastore", "process" ],
            "description" : "The type of DFD element data flows from in this environment.",
            "example" : "entity"
          },
          "theFromName" : {
            "type" : "string",
            "description" : "The name of the DFD element data flows from in this environment.",
            "example" : "PLC"
          },
          "theToType" : {
            "type" : "string",
            "enum" : [ "entity", "datastore", "process" ],
            "description" : "The type of DFD element data flows to in this environment.",
            "example" : "process"
          },
          "theToName" : {
            "type" : "string",
            "description" : "The name of the DFD element data flows to in this environment.",
            "example" : "Raise Alarm"
          },
          "theAssets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The name of assets carried by the data flow in this environment.",
            "example" : [ "PLC Event" ]
          }
        }
      },
      "Dependency" : {
        "required" : [ "theDependencyType", "theRationale", "theEnvironmentName", "theDepender", "theDependee", "theDependency" ],
        "properties" : {
          "theDependencyType" : {
            "type" : "string",
            "enum" : [ "asset", "goal", "task" ],
            "description" : "Type of dependency",
            "example" : "asset"
          },
          "theRationale" : {
            "type" : "string",
            "description" : "Justification for the dependency relationship",
            "example" : "Cannot upload trial data without the appropriate access controls being set."
          },
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "The environment this dependency relationship is specific to.",
            "example" : "Stroke"
          },
          "theDepender" : {
            "type" : "string",
            "description" : "The name of the role that requires the dependency.",
            "example" : "Data Provider"
          },
          "theDependee" : {
            "type" : "string",
            "description" : "The name of the role that provides the dependency.",
            "example" : "Certificate Authority"
          },
          "theDependency" : {
            "type" : "string",
            "description" : "The asset, goal, or task dependency itself.",
            "example" : "Access Control Policy"
          }
        }
      },
      "DocumentReference" : {
        "required" : [ "theName", "theDocName", "theContributor", "theExcerpt" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Name of the document reference",
            "example" : "AJS shows current jobs"
          },
          "theDocName" : {
            "type" : "string",
            "description" : "Name of the associated external document",
            "example" : "Corporate interface GT concept"
          },
          "theContributor" : {
            "type" : "string",
            "description" : "Name of the person who elicited or contributed this document reference.",
            "example" : "Shamal Faily"
          },
          "theExcerpt" : {
            "type" : "string",
            "description" : "Extract from the external document that forms the basis of the document reference.",
            "example" : "AJS indicates how many jobs you have."
          }
        }
      },
      "DomainProperty" : {
        "required" : [ "theName", "theType", "theDescription", "theOriginator", "theTags" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Domain property name",
            "example" : "Infrastructure knowledge"
          },
          "theType" : {
            "type" : "string",
            "enum" : [ "Hypothesis", "Invariant" ],
            "description" : "Type of domain property",
            "example" : "Hypothesis"
          },
          "theDescription" : {
            "type" : "string",
            "description" : "Domain property details",
            "example" : "NeuroGrid API users have a working knowledge of the NeuroGrid infrastructure, and the security mechanisms used by it."
          },
          "theOriginator" : {
            "type" : "string",
            "description" : "Contributor of the domain property",
            "example" : "Shamal Faily"
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags",
            "example" : [ "tag1", "tag2" ]
          }
        }
      },
      "Environment" : {
        "required" : [ "theName", "theShortCode", "theDescription", "theEnvironments", "theDuplicateProperty", "theOverridingEnvironment", "theTensions" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Environment name",
            "example" : "Psychosis"
          },
          "theShortCode" : {
            "type" : "string",
            "description" : "Environment short code",
            "example" : "PSY"
          },
          "theDescription" : {
            "type" : "string",
            "description" : "Environment description",
            "example" : "The exemplar aims to integrate large existing datasets of serial MRI scans and behaviour data coupled to the NeuroGrid image analysis service into a Grid-based database, test image normalisation techniques, and develop a general ontology for a psychosis databas, for use in multi-centre studies."
          },
          "theEnvironments" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "A list of environments within this environment.  Relevant only if this is a composite environment"
          },
          "theDuplicateProperty" : {
            "type" : "string",
            "enum" : [ "None", "Maximise", "Override" ],
            "example" : "None"
          },
          "theOverridingEnvironment" : {
            "type" : "string",
            "description" : "If this is a composite environment and the the duplicate property is set to override then this will be name of the environment that environment specific properties will overriden for.  If it isn't then this value will be blank.",
            "example" : ""
          },
          "theTensions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EnvironmentTension"
            },
            "description" : "Positive or negative tensions between security and privacy properties.",
            "example" : [ {
              "value" : 0,
              "attr_id" : 7,
              "base_attr_id" : 2,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 6,
              "base_attr_id" : 2,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 7,
              "base_attr_id" : 3,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 5,
              "base_attr_id" : 1,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 7,
              "base_attr_id" : 1,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 4,
              "base_attr_id" : 1,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 6,
              "base_attr_id" : 0,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 5,
              "base_attr_id" : 0,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 7,
              "base_attr_id" : 0,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 6,
              "base_attr_id" : 3,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 4,
              "base_attr_id" : 0,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 6,
              "base_attr_id" : 1,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 5,
              "base_attr_id" : 2,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 4,
              "base_attr_id" : 3,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 4,
              "base_attr_id" : 2,
              "rationale" : "None"
            }, {
              "value" : 0,
              "attr_id" : 5,
              "base_attr_id" : 3,
              "rationale" : "None"
            } ]
          }
        }
      },
      "EnvironmentTension" : {
        "required" : [ "base_attr_id", "attr_id", "value", "rationale" ],
        "properties" : {
          "base_attr_id" : {
            "type" : "integer",
            "description" : "Security property indicator (0 - Confidentiality, 1 - Integrity, 2 - Availability, 3 - Accountability)",
            "example" : 0
          },
          "attr:id" : {
            "type" : "integer",
            "description" : "Privacy property indicator (4 - Anonyimity, 5 - Pseudonymity, 6 - Unobservability, 7 - Unlinkability)",
            "example" : 4
          },
          "value" : {
            "type" : "integer",
            "example" : -1,
            "description" : "Indicator of whether the security/privacy tensions are positive (1) or negative (-1)"
          },
          "rationale" : {
            "type" : "string",
            "example" : 0
          }
        }
      },
      "ExpectedMessage" : {
        "required" : [ "message" ],
        "properties" : {
          "message" : {
            "type" : "string"
          }
        },
        "example" : [ {
          "message" : "Operation response"
        } ]
      },
      "ExternalDocument" : {
        "required" : [ "theName", "theVersion", "thePublicationDate", "theAuthors", "theDescription" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Name of the external document source",
            "example" : "Alarm handling GT concept"
          },
          "theVersion" : {
            "type" : "string",
            "description" : "Version of the external document source",
            "example" : 1
          },
          "thePublicationDate" : {
            "type" : "string",
            "description" : "Publication date of the external document source",
            "example" : "August 2010"
          },
          "theAuthors" : {
            "type" : "string",
            "description" : "Authors or contributors to the external document source",
            "example" : "Shamal Faily"
          }
        }
      },
      "ImageUploadArguments" : {
        "required" : [ "file" ],
        "properties" : {
          "file" : {
            "type" : "object",
            "properties" : {
              "buf" : {
                "type" : "string",
                "description" : "Binary image data",
                "example" : ""
              },
              "name" : {
                "type" : "string",
                "description" : "Name of image file to be created",
                "example" : "Claire.jpg"
              }
            }
          }
        }
      },
      "ImportArguments" : {
        "required" : [ "overwrite", "type", "urlenc_file_contents" ],
        "properties" : {
          "overwrite" : {
            "type" : "integer",
            "description" : "Indicates (1) if this model overwrites existing data on import",
            "example" : 1
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Model", "Project data", "Requirements", "Risk Analysis", "Usability", "Misusability", "Associations", "Threat and Vulnerability Types", "Domain Values", "Threat and Vulnerability Directory", "Security Pattern", "Architectural Pattern", "Attack Pattern", "Synopses", "Assets", "Processes", "Locations", "Dataflows", "Attack Tree (Dot)" ],
            "description" : "Type of model file being imported",
            "example" : "Model"
          },
          "urlenc_file_contents" : {
            "type" : "string",
            "description" : "Contents of model file being imported.",
            "example" : "<?xml version=\"1.0\"?>\\n<!DOCTYPE cairis_model PUBLIC \"-//CAIRIS//DTD MODEL 1.0//EN\" \"http://cairis.org/dtd/cairis_model.dtd\"><cairis_model></cairis_model>"
          }
        }
      },
      "Interface" : {
        "required" : [ "theInterfaceName", "theInterfaceType", "theAccessRight", "thePrivilege" ],
        "properties" : {
          "theInterfaceName" : {
            "type" : "string",
            "example" : "if1"
          },
          "theInterfaceType" : {
            "type" : "string",
            "enum" : [ "provided", "required" ],
            "example" : "provided"
          },
          "theAccessRight" : {
            "type" : "string",
            "example" : "anonymous"
          },
          "thePrivilege" : {
            "type" : "string",
            "example" : "normal"
          }
        }
      },
      "Goal" : {
        "required" : [ "theName", "theOriginator", "theTags", "theEnvironmentProperties" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Goal name",
            "example" : "Anonymise data"
          },
          "theOriginator" : {
            "type" : "string",
            "description" : "The goal's author or originating source",
            "example" : "SF"
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags",
            "example" : [ "tag1", "tag2" ]
          },
          "theEnvironmentProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GoalEnvironmentProperties"
            },
            "description" : "Environment specific goal properties",
            "example" : [ {
              "theFitCriterion" : "TBC",
              "theConcerns" : [ ],
              "theEnvironmentName" : "Psychosis",
              "thePriority" : "High",
              "theSubGoalRefinements" : [ [ "Anonymisation guidelines", "requirement", "and", "No", "None" ], [ "Anonymised data", "requirement", "and", "No", "None" ] ],
              "theCategory" : "Achieve",
              "theDefinition" : "Anonymise clinical data to remove as many of the traceability links between the data and the volunteer or patient as possible.",
              "theConcernAssociations" : [ ],
              "theGoalRefinements" : [ [ "Upload clinical data to NeuroGrid", "goal", "and", "No", "None" ] ],
              "theIssue" : "None"
            }, {
              "theFitCriterion" : "TBC",
              "theConcerns" : [ ],
              "theEnvironmentName" : "Stroke",
              "thePriority" : "High",
              "theSubGoalRefinements" : [ {
                "theEndName" : "Anonymisation guidelines",
                "theEndType" : "requirement",
                "theRefType" : "and",
                "isAlternate" : "No",
                "theRationale" : "None"
              }, [ "Anonymised data", "requirement", "and", "No", "None" ] ],
              "theCategory" : "Achieve",
              "theDefinition" : "Anonymise clinical data to remove as many of the traceability links between the data and the volunteer or patient as possible.",
              "theConcernAssociations" : [ ],
              "theGoalRefinements" : [ {
                "theEndName" : "Upload clinical data to NeuroGrid",
                "theEndType" : "goal",
                "theRefType" : "and",
                "isAlternate" : "No",
                "theRationale" : "None"
              } ],
              "theIssue" : "None"
            } ]
          }
        }
      },
      "GoalEnvironmentProperties" : {
        "required" : [ "theCategory", "theConcernAssociations", "theConcerns", "theDefinition", "theEnvironmentName", "theFitCriterion", "theGoalRefinements", "theSubGoalRefinements", "theIssue", "thePriority" ],
        "properties" : {
          "theCategory" : {
            "type" : "string",
            "enum" : [ "Maintain", "Achieve", "Avoid", "Improve", "Increase", "Maximise", "Minimise" ],
            "description" : "Type of goal in the specific environment",
            "example" : "Achieve"
          },
          "theConcernAssociations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConcernAssociation"
            },
            "description" : "Asset associations associated with goal asset concerns",
            "example" : [ {
              "theSource" : "Access Control Policy",
              "theSourceNry" : "1",
              "theLinkVerb" : "",
              "theTargetNry" : "1..*",
              "theTarget" : "Analysis Data"
            } ]
          },
          "theConcerns" : {
            "type" : "string",
            "description" : "Names of assets concerned (specified by or constrained by) the goal in this environment.",
            "example" : [ "Access Control Policy", "Analysis Data" ]
          },
          "theDefinition" : {
            "type" : "string",
            "description" : "Definition for goal specific to the environment",
            "example" : "Anonymise clinical data to remove as many of the traceability links between the data and the volunteer or patient as possible."
          },
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "Name of the environment specific to the goal properties",
            "example" : "Psychosis"
          },
          "theFitCriterion" : {
            "type" : "string",
            "description" : "Fit criterion for the goal in this environment",
            "example" : "TBC"
          },
          "theGoalRefinements" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KAOSRefinement"
            },
            "description" : "Goal refinements specific to this environment where this goal is the sub-goal in the refinement.",
            "example" : [ {
              "theEndName" : "Upload clinical data to NeuroGrid",
              "theEndType" : "goal",
              "theRefType" : "and",
              "isAlternate" : "No",
              "theRationale" : "None"
            } ]
          },
          "theSubGoalRefinements" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KAOSRefinement"
            },
            "description" : "Goal refinements specific to this environment where this goal is the goal in the refinement.",
            "example" : [ {
              "theEndName" : "Anonymisation guidelines",
              "theEndType" : "requirement",
              "theRefType" : "and",
              "isAlternate" : "No",
              "theRationale" : "None"
            } ]
          },
          "theIssue" : {
            "type" : "string",
            "description" : "Issues or comments relating to the goal in this environment.",
            "example" : "None"
          },
          "thePriority" : {
            "type" : "string",
            "enum" : [ "Low", "Medium", "High" ],
            "description" : "The goal priority in this environment.",
            "example" : "High"
          }
        }
      },
      "KAOSRefinement" : {
        "required" : [ "theEndName", "theEndType", "theRefType", "isAlternate", "theRationale" ],
        "properties" : {
          "theEndName" : {
            "type" : "string",
            "description" : "The object name at the end of the refinement relationship",
            "example" : "Anonymisation guidelines"
          },
          "theEndType" : {
            "type" : "string",
            "enum" : [ "domainproperty", "goal", "misusecase", "obstacle", "requirement", "role", "task", "threat", "usecase", "vulnerability" ],
            "description" : "The type of object at the end of the refinement relationship.  The range of values available will depend on whether we are working with a goal or an obstacle, and whether the end is the goal or sub-goal end of the refinement association.",
            "example" : "requirement"
          },
          "theRefType" : {
            "type" : "string",
            "enum" : [ "and", "or", "responsible", "obstruct", "resolve" ],
            "description" : "The type of refinement relationship.  The range of values available will depend on whether we are working with a goal or an obstacle, and whether the end is the goal or sub-goal end of the refinement association.",
            "example" : "and"
          },
          "isAlternate" : {
            "type" : "string",
            "enum" : [ true, false ],
            "description" : "Indicates whether this goal or obstacle affords a goal/obstacle tree for an alternative possibility for satisfying the parent goal or obstacle.",
            "example" : false
          },
          "theRationale" : {
            "type" : "string",
            "description" : "The justification for this goal or obstacle refinement.",
            "example" : "None"
          }
        }
      },
      "Location" : {
        "required" : [ "theName", "theAssetInstances", "thePersonaInstances", "theLinks" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Name of the physical location",
            "example" : "WCH_4"
          },
          "theAssetInstances" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "theAsset", "theName" ],
              "properties" : {
                "theAsset" : {
                  "type" : "string",
                  "description" : "Name of the asset",
                  "example" : "SCADA Workstation"
                },
                "theName" : {
                  "type" : "string",
                  "description" : "Name of the asset instance",
                  "example" : "SWS-1"
                }
              }
            },
            "description" : "List of asset instances in this location",
            "example" : [ {
              "theName" : "SWS-1",
              "theAsset" : "SCADA Workstation"
            } ]
          },
          "thePersonaInstances" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "thePersona", "theName" ],
              "properties" : {
                "thePersona" : {
                  "type" : "string",
                  "description" : "Name of the persona",
                  "example" : "Rick"
                },
                "theName" : {
                  "type" : "string",
                  "description" : "Name of the persona instance",
                  "example" : "Rick"
                }
              }
            },
            "description" : "List of persona instances in this location.",
            "example" : [ {
              "thePersona" : "Rick",
              "theName" : "Rick"
            } ]
          },
          "theLinks" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Names of location objects linked to this location.",
            "example" : [ "PC1", "WCH_5", "PC2" ]
          }
        }
      },
      "Locations" : {
        "required" : [ "theName", "theDiagram", "theLocations" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Name of the physical collection of locations",
            "example" : "PooleWWTW"
          },
          "theDiagram" : {
            "type" : "string",
            "description" : "Name of the image file describing the locations.  This should be in the CAIRIS server's image directory.  Set to blank if not defined.",
            "example" : ""
          },
          "theLocations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Location"
            },
            "description" : "List of physical locations at this site.",
            "example" : [ {
              "theAssetInstances" : [ ],
              "thePersonaInstances" : [ ],
              "theLinks" : [ "WCH_1", "WCH_2", "WCH_3", "WCH_4" ],
              "theName" : "PC1"
            }, {
              "theAssetInstances" : [ {
                "theName" : "PC-9",
                "theAsset" : "ICT PC"
              } ],
              "thePersonaInstances" : [ ],
              "theLinks" : [ "PC1" ],
              "theName" : "WCH_1"
            }, {
              "theAssetInstances" : [ {
                "theName" : "PC-67",
                "theAsset" : "ICT PC"
              } ],
              "thePersonaInstances" : [ ],
              "theLinks" : [ "PC1" ],
              "theName" : "WCH_2"
            }, {
              "theAssetInstances" : [ {
                "theName" : "PC-76",
                "theAsset" : "ICT PC"
              } ],
              "thePersonaInstances" : [ ],
              "theLinks" : [ "PC1" ],
              "theName" : "WCH_3"
            }, {
              "theAssetInstances" : [ {
                "theName" : "SWS-1",
                "theAsset" : "SCADA Workstation"
              }, {
                "theName" : "PC-23",
                "theAsset" : "ICT PC"
              }, {
                "theName" : "PC-24",
                "theAsset" : "ICT PC"
              }, {
                "theName" : "PC-25",
                "theAsset" : "ICT PC"
              } ],
              "thePersonaInstances" : [ {
                "thePersona" : "Rick",
                "theName" : "Rick"
              } ],
              "theLinks" : [ "PC1", "WCH_5", "PC2" ],
              "theName" : "WCH_4"
            }, {
              "theAssetInstances" : [ ],
              "thePersonaInstances" : [ ],
              "theLinks" : [ "WCH_4", "WCH_6" ],
              "theName" : "WCH_5"
            }, {
              "theAssetInstances" : [ {
                "theName" : "M12",
                "theAsset" : "Modem"
              }, {
                "theName" : "R18",
                "theAsset" : "Router"
              }, {
                "theName" : "PC-11",
                "theAsset" : "ICT PC"
              } ],
              "thePersonaInstances" : [ {
                "thePersona" : "Barry",
                "theName" : "Barry"
              } ],
              "theLinks" : [ "WCH_5" ],
              "theName" : "WCH_6"
            }, {
              "theAssetInstances" : [ ],
              "thePersonaInstances" : [ ],
              "theLinks" : [ "WCH_4", "MR_1", "MR_2", "MR_3", "MR_4" ],
              "theName" : "PC2"
            }, {
              "theAssetInstances" : [ ],
              "thePersonaInstances" : [ ],
              "theLinks" : [ "PC2" ],
              "theName" : "MR_1"
            }, {
              "theAssetInstances" : [ ],
              "thePersonaInstances" : [ ],
              "theLinks" : [ "PC2" ],
              "theName" : "MR_2"
            }, {
              "theAssetInstances" : [ ],
              "thePersonaInstances" : [ ],
              "theLinks" : [ "PC2" ],
              "theName" : "MR_3"
            }, {
              "theAssetInstances" : [ ],
              "thePersonaInstances" : [ ],
              "theLinks" : [ "PC2" ],
              "theName" : "MR_4"
            } ]
          }
        }
      },
      "MisuseCase" : {
        "description" : "Misuse case that puts the risk in context.  With the exception of the misuse case's environment specific description, this is automatically generated by CAIRIS.",
        "required" : [ "theName", "theRiskName", "theThreatName", "theVulnerabilityName", "theEnvironmentProperties" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Misuse case name",
            "example" : "Exploit Unauthorised Certificate Access"
          },
          "theRiskName" : {
            "type" : "string",
            "description" : "Name of risk this misuse puts in context.",
            "example" : "Unauthorised Certificate Access"
          },
          "theThreatName" : {
            "type" : "string",
            "description" : "Name of threat associated with misuse case risk.",
            "example" : "Social Engineering"
          },
          "theVulnerabilityName" : {
            "type" : "string",
            "description" : "Name of vulnerability associated with misuse case risk.",
            "example" : "Certificate ubiquity"
          },
          "theEnvironmentProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MisuseCaseEnvironmentProperties"
            },
            "example" : [ {
              "theEnvironmentName" : "Psychosis",
              "theLikelihood" : "Occasional",
              "theAssets" : [ "User certificate", "Client workstation" ],
              "theRiskRating" : {
                "environment" : "Psychosis",
                "rating" : "Undesirable",
                "vulnerability" : "Certificate ubiquity",
                "threat" : "Social engineering"
              },
              "theAttackers" : [ "Carol" ],
              "theSeverity" : "Critical",
              "theDescription" : "Carol gained access to the Computing Laboratory by tail-gating ...",
              "theObjective" : "Exploit vulnerabilities in User certificate to threaten User certificate,Client workstation."
            } ]
          }
        }
      },
      "MisuseCaseEnvironmentProperties" : {
        "required" : [ "theEnvironmentName", "theAssets", "theAttackers", "theDescription", "theObjective", "theLikelihood", "theRiskRating", "theSeverity" ],
        "properties" : {
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "Name of the environment specific to the misuse case narrative.  Automatically generated and read only.",
            "example" : "Psychosis"
          },
          "theAssets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Names of assets endangered by risk in this environment.  Automatically generated and read only.",
            "example" : [ "User certificate", "Client workstation" ]
          },
          "theAttackers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Names of attackers associated with the risk in this environment.  Automatically generated and read only.",
            "example" : [ "Carol" ]
          },
          "theDescription" : {
            "type" : "string",
            "description" : "Misuse case narrative that describes the risk being realised in this environment.",
            "example" : "Carol gained access to the Computing Laboratory by tail-gating..."
          },
          "theObjective" : {
            "type" : "string",
            "description" : "Objective of the misuse case specific to this environment.  Automatically generated and read only.",
            "example" : "Exploit vulnerabilities in User certificate to threaten User certificate,Client workstation."
          },
          "theLikelihood" : {
            "type" : "string",
            "description" : "The likelihood of the risk's threat in this environment.  Automatically generated and read only.",
            "example" : "Occasional"
          },
          "theRiskRating" : {
            "$ref" : "#/components/schemas/RiskRating"
          },
          "theSeverity" : {
            "type" : "string",
            "description" : "The severity of the risk's vulnerability in this environment.  Automatically generated and read only."
          }
        }
      },
      "MitigateEnvironmentProperties" : {
        "required" : [ "theEnvironmentName", "theType", "theDetectionMechanisms", "theDetectionPoint" ],
        "properties" : {
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "Name of the environment these response properties are specific to."
          },
          "theType" : {
            "type" : "string",
            "enum" : [ "Deter", "Prevent", "Detect", "React" ],
            "description" : "Type of mitigation response for this environment"
          },
          "theDetectionMechanisms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The names of detection countermeasure assets in this environment.  Relevant only if the response type is React.",
            "example" : [ ]
          },
          "theDetectionPoint" : {
            "type" : "string",
            "enum" : [ "", "Before", "At", "After" ],
            "description" : "Indicates whether this response detects the risk before, at the time, or after a risk occurs in the environment.  Before/At/After values are relevant only if the response type is Detect."
          }
        }
      },
      "ObjectDependency" : {
        "required" : [ "theDimensionName", "theObjectName" ],
        "properties" : {
          "theDimensionName" : {
            "type" : "string",
            "description" : "The name of the dependent object's dimension",
            "example" : "obstacle"
          },
          "theObjectName" : {
            "type" : "string",
            "description" : "THe name of the dependent object",
            "example" : "Insecure internal data transmission"
          }
        }
      },
      "Obstacle" : {
        "required" : [ "theName", "theOriginator", "theTags", "theEnvironmentProperties" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Obstacle name",
            "example" : "Fraudulant clinical data access"
          },
          "theOriginator" : {
            "type" : "string",
            "description" : "The obstacle's author or originating source",
            "example" : "SF"
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags",
            "example" : [ "tag1", "tag2" ]
          },
          "theEnvironmentProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObstacleEnvironmentProperties"
            },
            "description" : "Environment specific obstacle properties",
            "example" : [ {
              "theConcerns" : [ ],
              "theEnvironmentName" : "Psychosis",
              "theSubGoalRefinements" : [ {
                "isAlternate" : "No",
                "theEndType" : "obstacle",
                "theEndName" : "Access user certificate",
                "theRationale" : "None",
                "theRefType" : "or"
              } ],
              "theCategory" : "Accountability Threat",
              "theDefinition" : "Fraudulant attempt to gain access to clinical data.",
              "theGoalRefinements" : [ {
                "isAlternate" : "No",
                "theEndType" : "obstacle",
                "theEndName" : "Unauthorised clinical data access",
                "theRationale" : "None",
                "theRefType" : "or"
              } ],
              "theProbability" : 0.0,
              "theProbabilityRationale" : "None"
            } ]
          }
        }
      },
      "ObstacleEnvironmentProperties" : {
        "required" : [ "theEnvironmentName", "theDefinition", "theCategory", "theGoalRefinements", "theSubGoalRefinements", "theConcerns", "theProbability", "theProbabilityRationale" ],
        "properties" : {
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "The name of the environment specific to these obstacle properties.",
            "example" : "Psychosis"
          },
          "theDefinition" : {
            "type" : "string",
            "description" : "Definition for the obstacle in this environment.",
            "example" : "Fraudulant attempt to gain access to clinical data"
          },
          "theCategory" : {
            "type" : "string",
            "enum" : [ "Confidentiality Threat", "Integrity Threat", "Availability Threat", "Accountability Threat", "Anonymity Threat", "Pseudonymity Threat", "Unlinkability Threat", "Unobservability Threat", "Threat", "Vulnerability", "Duration", "Frequency", "Demands", "Goal Support" ],
            "description" : "The category obstacle specific to this environment",
            "example" : "Accountability Threat"
          },
          "theGoalRefinements" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KAOSRefinement"
            },
            "description" : "Obstacle refinements specific to this environment where this obstacle is the sub-goal in the refinement.",
            "example" : [ {
              "isAlternate" : "No",
              "theEndType" : "obstacle",
              "theEndName" : "Unauthorised clinical data access",
              "theRationale" : "None",
              "theRefType" : "or"
            } ]
          },
          "theSubGoalRefinements" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KAOSRefinement"
            },
            "description" : "Obstacle refinements specific to this environment where this obstacle is the goal in the refinement.",
            "example" : [ {
              "isAlternate" : "No",
              "theEndType" : "obstacle",
              "theEndName" : "Access user certificate",
              "theRationale" : "None",
              "theRefType" : "or"
            } ]
          },
          "theConcerns" : {
            "type" : "string",
            "description" : "Names of assets concerned (specified by or constrained by) the obstacle in this environment.",
            "example" : [ ]
          },
          "theProbability" : {
            "type" : "number",
            "description" : "The probability (between 0.0 and 1.0) of this obstacle being realised given the environment.  Where this is not known, the probability is set to 0.0.",
            "example" : 0.0
          },
          "theProbabilityRationale" : {
            "type" : "string",
            "description" : "Justification for the probability value",
            "example" : "None"
          }
        }
      },
      "PatternStructure" : {
        "required" : [ "theHeadAsset", "theHeadAdornment", "theHeadNry", "theHeadRole", "theTailRole", "theTailNry", "theTailAdornment", "theTailAsset" ],
        "properties" : {
          "theHeadAsset" : {
            "type" : "string",
            "description" : "Name of template asset at the head of the association",
            "example" : "Decision Wrapper"
          },
          "theHeadAdornment" : {
            "type" : "string",
            "enum" : [ "Inheritence", "Association", "Aggregation", "Composition", "Dependency" ],
            "description" : "Type of template asset association at the head end of the association",
            "example" : "Association"
          },
          "theHeadNry" : {
            "type" : "string",
            "enum" : [ "1", "*", "1..*" ],
            "description" : "Association multiplicity (head)",
            "example" : "1"
          },
          "theHeadRole" : {
            "type" : "string",
            "description" : "Indicates the role associated with the head end of the association.",
            "example" : ""
          },
          "theTailRole" : {
            "type" : "string",
            "description" : "Indicates the role associated with the tail end of the association.",
            "example" : ""
          },
          "theTailNry" : {
            "type" : "string",
            "enum" : [ "1", "*", "1..*" ],
            "description" : "Association multiplicity (tail)"
          },
          "theTailAdornment" : {
            "type" : "string",
            "enum" : [ "Inheritence", "Association", "Aggregation", "Composition", "Dependency" ],
            "description" : "Type of template asset association at the tail end of the association",
            "example" : "Association"
          },
          "theTailAsset" : {
            "type" : "string",
            "description" : "Name of template asset at the tail end of the association."
          }
        }
      },
      "Persona" : {
        "required" : [ "theName", "theTags", "theActivities", "theAttitudes", "theAptitudes", "theMotivations", "theSkills", "theIntrinsic", "theContextual", "theImage", "isAssumption", "thePersonaType", "theEnvironmentProperties" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Persona name",
            "example" : "Claire"
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags",
            "example" : [ ]
          },
          "theActivities" : {
            "type" : "string",
            "description" : "Activities carried out by the persona.",
            "example" : "Claire is a clinical researcher within the Psychosis exemplar.  She is responsible for a group which is developing and testing processing pipelines for harmonising MRI images from different centres.\\n\\nClaire authorises requests that other members of her group make for accessing NeuroGrid, and is officially responsible for making sure her colleagues aren't misusing their access.  In practice, however, she delegates much of her responsibility to one of her more security-knowledgeable colleagues."
          },
          "theAttitudes" : {
            "type" : "string",
            "description" : "Attitudes held by the persona.",
            "example" : "Claire feels that NeuroGrid has a lot to offer her research but, right now, its hard to see the benefits for the usability problems she faces.\\n\\nAlthough Claire appreciates the importance of security and the confidentialty of her research subjects, authorising colleague requests for data access and liasing with the infrastructure team is a time consuming process which isn't helping her get any research done.\\n\\nClaire is also perplexed at why security could cause simple workflows take such a long time to run, but she also remembers how long it used to take to get data before NeuroGrid so she can live with the performance issues."
          },
          "theAptitudes" : {
            "type" : "string",
            "description" : "Persona aptitudes.",
            "example" : "Claire and her colleagues follow a set of processes and guidelines when working with data uploaded to NeuroGrid.\\n\\nBecause obtaining data is an expensive business, Claire also tries to reuse data and analysis as much as possible, and as far as her ethics clearance allows.\\n\\n"
          },
          "theMotivations" : {
            "type" : "string",
            "description" : "Persona motivations",
            "example" : "Besides her research, Claire's primary security concerns are centered around the datasets she maintains, and making sure her colleagues and collaborators can access the data they need."
          },
          "theSkills" : {
            "type" : "string",
            "description" : "Notable persona skills.",
            "example" : "Nothing stipulated"
          },
          "theIntrinsic" : {
            "type" : "string",
            "description" : "Persona properties related to intrinsic trust.",
            "example" : "None"
          },
          "theContextual" : {
            "type" : "string",
            "description" : "Persona properties related to contextual trust.",
            "example" : "None"
          },
          "theImage" : {
            "type" : "string",
            "description" : "Name of the persona avatar image file.  This should be in the CAIRIS server's image directory.",
            "example" : "Claire.jpg"
          },
          "isAssumption" : {
            "type" : "integer",
            "description" : "Indicates (1) if the persona is an assumption persona or not.",
            "example" : 0
          },
          "thePersonaType" : {
            "type" : "string",
            "enum" : [ "Customer", "Negative", "Primary", "Secondary", "Served", "Supplemental" ],
            "description" : "Type of persona",
            "example" : "Primary"
          },
          "theEnvironmentProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PersonaEnvironmentProperties"
            },
            "description" : "Environment specific persona properties.",
            "example" : [ {
              "theDirectFlag" : "False",
              "theRoles" : [ "Researcher" ],
              "theNarrative" : "Nothing stipulated",
              "theEnvironmentName" : "Psychosis"
            } ]
          }
        }
      },
      "PersonaCharacteristic" : {
        "required" : [ "thePersonaName", "theModQual", "theVariable", "theCharacteristic", "theCharacteristicSynopsis", "theGrounds", "theWarrant", "theBacking", "theRebuttal" ],
        "properties" : {
          "thePersonaName" : {
            "type" : "string",
            "description" : "Name of the persona associated with this characteristic",
            "example" : "Helen"
          },
          "theModQual" : {
            "type" : "string",
            "description" : "Modal qualifier that indicates how much confidence there is in the characteristic.",
            "example" : "Probably"
          },
          "theVariable" : {
            "type" : "string",
            "enum" : [ "Activities", "Attitudes", "Aptitudes", "Motivations", "Skills", "Environment Narrative", "Intrinsic", "Contextual" ],
            "description" : "Indicates which aspect of the persona description this characteristic is associated with.",
            "example" : "Attitudes"
          },
          "theCharacteristic" : {
            "type" : "string",
            "description" : "Description of the persona characteristic",
            "example" : "Maintains a Work-Life split"
          },
          "theCharacteristicSynopsis" : {
            "$ref" : "#/components/schemas/ReferenceSynopsis"
          },
          "theGrounds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CharacteristicReference"
            },
            "description" : "Grounds for the argument justifying the persona characteristic.",
            "example" : [ ]
          },
          "theWarrant" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CharacteristicReference"
            },
            "description" : "Warrant for the argument justifying the persona characteristic.",
            "example" : [ {
              "theReferenceName" : "Mother of toddler",
              "theReferenceDescription" : "Description:  For example notifications could be sent to parents in case that their child leaves a dedicated area (e.g. leaving Berlin - something must be wrong).",
              "theCharacteristicType" : "warrant",
              "theReferenceContribution" : {
                "theContribution" : "Help",
                "theMeansEnd" : "means"
              },
              "theDimensionName" : "document",
              "theReferenceSynopsis" : {
                "theActor" : "Helen",
                "theSynopsis" : "Parent toddler",
                "theDimension" : "softgoal",
                "theActorType" : "persona"
              }
            } ]
          },
          "theBacking" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of reference names that act as backing to the warrant elements.",
            "example" : [ "Context Sensitive Triggering User Story" ]
          },
          "theRebuttal" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CharacteristicReference"
            },
            "description" : "Rebuttal for the argument justifying the persona characteristic.",
            "example" : [ ]
          }
        }
      },
      "PersonaCountermeasureCharacteristic" : {
        "required" : [ "thePersona", "theTask", "theDemands", "theDuration", "theFrequency", "theGoalConflict" ],
        "properties" : {
          "thePersona" : {
            "type" : "string",
            "description" : "The name of the persona associated with the countermeasure in this environment.",
            "example" : "Claire"
          },
          "theTask" : {
            "type" : "string",
            "description" : "The name of the task associated with the countermeasure in this environment.",
            "example" : "Upload data"
          },
          "theDemands" : {
            "type" : "string",
            "enum" : [ "High Help", "Medium Help", "Low Help", "None", "Low Hindrance", "Medium Hindrance", "High Hindrance" ],
            "description" : "Indication of the impact on the demands placed on the persona completing the task in this environment where the countermeasure is present.",
            "example" : "Low"
          },
          "theDuration" : {
            "type" : "string",
            "enum" : [ "High Help", "Medium Help", "Low Help", "None", "Low Hindrance", "Medium Hindrance", "High Hindrance" ],
            "description" : "An indication of the impact on the time taken by the persona to complete the task in this environment where the countermeasure is present.",
            "example" : "Low"
          },
          "theFrequency" : {
            "type" : "string",
            "enum" : [ "High Help", "Medium Help", "Low Help", "None", "Low Hindrance", "Medium Hindrance", "High Hindrance" ],
            "description" : "An indication of the impact on how frequently the persona completes the task in this environment where the countermeasure is present.",
            "example" : "Low"
          },
          "theGoalConflict" : {
            "type" : "string",
            "enum" : [ "High Help", "Medium Help", "Low Help", "None", "Low Hindrance", "Medium Hindrance", "High Hindrance" ],
            "description" : "An indication of the impact on the conflicts faced by the persona between the task and other goals in this environment where the countermeasure is present.",
            "example" : "High"
          }
        }
      },
      "PersonaTaskCharacteristic" : {
        "required" : [ "theDemands", "theDuration", "theFrequency", "theGoalConflict", "thePersona" ],
        "properties" : {
          "theDemands" : {
            "type" : "string",
            "enum" : [ "None", "Low", "Medium", "High" ],
            "description" : "Indication of the demands placed on the persona completing the task in this environment.",
            "example" : "Low"
          },
          "theDuration" : {
            "type" : "string",
            "enum" : [ "Low", "Medium", "High" ],
            "description" : "An indication of the time taken by the persona to complete the task in this environment.",
            "example" : "Low"
          },
          "theFrequency" : {
            "type" : "string",
            "enum" : [ "Low", "Medium", "High" ],
            "description" : "An indication of how frequently the persona completes the task in this environment.",
            "example" : "Low"
          },
          "theGoalConflict" : {
            "type" : "string",
            "enum" : [ "None", "Low", "Medium", "High" ],
            "description" : "An indication of the conflicts faced by the persona between the task and other goals in this environment.",
            "example" : "High"
          },
          "thePersona" : {
            "type" : "string",
            "description" : "Persona name",
            "example" : "Claire"
          }
        }
      },
      "PersonaEnvironmentProperties" : {
        "required" : [ "theEnvironmentName", "theDirectFlag", "theRoles", "theNarrative" ],
        "properties" : {
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "Name of the environment these persona properties are specific to."
          },
          "theDirectFlag" : {
            "type" : "string",
            "enum" : [ true, false ],
            "description" : "Indicates (True) if the persona directly uses the system in the specific environment.",
            "example" : false
          },
          "theRoles" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Names of the roles fulfilled by the persona in the specific environment.",
            "example" : [ "Researcher" ]
          },
          "theNarrative" : {
            "type" : "string",
            "description" : "Information about the persona specific to the environment.",
            "example" : "Nothing stipulated"
          }
        }
      },
      "ProjectSettings" : {
        "required" : [ "projectName", "richPicture", "projectScope", "definitions", "projectGoals", "contributions", "projectBackground", "revisions" ],
        "properties" : {
          "projectName" : {
            "type" : "string",
            "description" : "Name of this CAIRIS project",
            "example" : "ACME Water"
          },
          "richPicture" : {
            "type" : "string",
            "description" : "Name of the rich picture file.  This should be in the CAIRIS server's image directory.  Set to blank if not defined.",
            "example" : "stcsContext.jpg"
          },
          "projectScope" : {
            "type" : "string",
            "description" : "Description of the project scope.",
            "example" : "All ICT infrastructure in support of Enterprise SCADA, Telemetry and Control Systems indicated in the rich picture."
          },
          "definitions" : {
            "type" : "object",
            "description" : "Dictionary of common definitions.",
            "example" : {
              "STCS" : "Scada, Telemetry, and Control Systems",
              "USB" : "Universal Serial Bus",
              "ACME" : "ACME Water",
              "WMS" : "Work Management System",
              "AJS" : "Asset Job System",
              "MCC" : "Motor Control Center",
              "EnterpriseSCADA" : "Enterprise SCADA system currently being deployed to support the Advanced Digester project.",
              "RFC" : "Request for change",
              "TMS" : "A family of products for providing continuous monitoring of the asset estate.",
              "DMZ" : "Demilitarised Zone",
              "SCADA" : "Supervisor Control and Data Acquisition",
              "ICT" : "Information and Communications Technology"
            }
          },
          "projectGoals" : {
            "type" : "string",
            "description" : "Description of project goals.",
            "example" : "To provide a secure operating environment for SCADA, Telemetry and Control Systems associated with assets owned and operated by ACME."
          },
          "contributions" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "firstName", "surname", "role", "affiliation" ],
              "properties" : {
                "firstName" : {
                  "type" : "string",
                  "description" : "First name of project contributor",
                  "example" : "Shamal"
                },
                "surname" : {
                  "type" : "string",
                  "description" : "Surname of project contributor",
                  "example" : "Faily"
                },
                "role" : {
                  "type" : "string",
                  "enum" : [ "Facilitator", "Participant", "Scribe" ],
                  "description" : "Role played by the contributor",
                  "example" : "Facilitator"
                },
                "affiliation" : {
                  "type" : "string",
                  "description" : "Affiliation of the contributor",
                  "example" : "Bournemouth University"
                }
              }
            }
          },
          "projectBackground" : {
            "type" : "string",
            "description" : "Background to the project",
            "example" : "The security of the environment around Control Systems, operational personnel, sites, assets, activities, information, technological resources, and services has taken on increased importance at ACME Water for the following reasons:\n\n* The disappearing network boundary: a highly mobile workforce works on assets and systems deployed over a diverse and challenging geographic terrain.  Information Technology enables this but, in doing so, needs to provide controlled access to core applications, allowing multiple protocols access through the perimeter, reducing perimeter controls, allowing partners to deliver contractual obligations on time and to cost.\n\n* The business climate is highly regulated, and delivery of Wastewater and Cleanwater services are critical to our customers.  It is imperative ACME employees are made aware of the importance of protecting our assets, information, and reputation to meet this end.\n\n* Law requires companies to institute reasonable, effective and consistent controls designed to prevent the disclosure and falsification of information, the safety of personnel, sites, and the protection of technological resources.\n\n* Rapid changes face ACME in the use and dependence of computers and network technologies.  It is necessary and reasonable to expect everyone to apply the proper methods of handling and safeguarding information, and managing computer and network resources."
          },
          "revisions" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "id", "date", "description" ],
              "properties" : {
                "id" : {
                  "type" : "integer",
                  "description" : "Revision number",
                  "example" : 1
                },
                "date" : {
                  "type" : "string",
                  "description" : "Date of revision",
                  "example" : "15-12-22 10:00:00"
                },
                "description" : {
                  "type" : "string",
                  "description" : "Revision comments",
                  "example" : "Initial version"
                }
              }
            }
          }
        }
      },
      "ReferenceContribution" : {
        "required" : [ "theContribution", "theMeansEnd" ],
        "properties" : {
          "theContribution" : {
            "type" : "string",
            "enum" : [ "", "Make", "SomePositive", "Help", "Hurt", "SomeNegative", "Break" ],
            "description" : "The positive or negative contribution made.",
            "example" : "SomePositive"
          },
          "theMeansEnd" : {
            "type" : "string",
            "enum" : [ "", "means", "end" ],
            "description" : "Indicates whether this element is the means or end of the contribution relationship.",
            "example" : "end"
          }
        }
      },
      "ReferenceSynopsis" : {
        "required" : [ "theActor", "theActorType", "theDimension", "theSynopsis" ],
        "properties" : {
          "theActor" : {
            "type" : "string",
            "description" : "The actor the associated goal or soft goal will be within the boundary of.",
            "example" : "Helen"
          },
          "theActorType" : {
            "type" : "string",
            "enum" : [ "", "asset", "component", "persona", "role" ],
            "description" : "Type of actor.",
            "example" : "persona"
          },
          "theDimension" : {
            "type" : "string",
            "enum" : [ "", "goal", "softgoal" ],
            "description" : "Indicates whether the associated element will be a goal or softgoal.",
            "example" : "softgoal"
          },
          "theSynopsis" : {
            "type" : "string",
            "description" : "Synopsis of the related document or concept reference expressed in intentional terms.  Blank if this synposis is not set.",
            "example" : "Meet friends / colleagues."
          }
        }
      },
      "Requirement" : {
        "required" : [ "theName", "theLabel", "theDescription", "thePriority", "theOriginator", "theFitCriterion", "theRationale", "theType" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Short name synopsis of the requirement",
            "example" : "Application Isolation"
          },
          "theLabel" : {
            "type" : "integer",
            "description" : "Numeric label associated with the requirement's asset or environment",
            "example" : 1
          },
          "theDescription" : {
            "type" : "string",
            "description" : "The requirement text.",
            "example" : "Applications shall be isolated from each other."
          },
          "thePriority" : {
            "type" : "integer",
            "description" : "The requirement priority.",
            "enum" : [ 1, 2, 3 ],
            "example" : 1
          },
          "theOriginator" : {
            "description" : "The requirement's author or originating source.",
            "type" : "string",
            "example" : "Oxford"
          },
          "theFitCriterion" : {
            "type" : "string",
            "description" : "Fit criterion which, if satisfied, validates the requirement.",
            "example" : "Application are unable to view or modify another application's data or execution state."
          },
          "theRationale" : {
            "type" : "string",
            "description" : "The requirement's justification.",
            "example" : "Based on PS-USR-Oxford-62"
          },
          "theType" : {
            "type" : "string",
            "description" : "The requirement type.",
            "enum" : [ "Functional", "Data", "Look and Feel", "Usability", "Performance", "Operational", "Maintainability", "Portability", "Security", "Cultural and Political", "Legal", "Privacy" ],
            "example" : "Functional"
          }
        }
      },
      "Response" : {
        "required" : [ "theName", "theResponseType", "theRiskName", "theTags", "theEnvironmentProperties" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Risk response name",
            "example" : "Prevent Unauthorised Certificate Access"
          },
          "theResponseType" : {
            "type" : "string",
            "enum" : [ "Accept", "Transfer", "Prevent" ],
            "description" : "Risk response type.",
            "example" : "Prevent"
          },
          "theRiskName" : {
            "type" : "string",
            "description" : "Name of risk responded to.",
            "example" : "Unauthorised Certificate Access"
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags",
            "example" : [ ]
          },
          "theEnvironmentProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResponseEnvironmentProperties"
            },
            "description" : "Environment-specific response properties",
            "example" : {
              "mitigate" : [ {
                "theDetectionMechanisms" : [ ],
                "theDetectionPoint" : "",
                "theType" : "Prevent",
                "theEnvironmentName" : "Psychosis"
              }, {
                "theDetectionMechanisms" : [ ],
                "theDetectionPoint" : "",
                "theType" : "Prevent",
                "theEnvironmentName" : "Stroke"
              } ]
            }
          }
        }
      },
      "ResponseEnvironmentProperties" : {
        "required" : [ "accept", "mitigate", "transfer" ],
        "properties" : {
          "accept" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AcceptEnvironmentProperties"
            },
            "description" : "Environment-specific response properties when risk is accepted.",
            "example" : [ ]
          },
          "mitigate" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MitigateEnvironmentProperties"
            },
            "description" : "Environment-specific response properties when risk is mitigated.",
            "example" : [ {
              "theDetectionMechanisms" : [ ],
              "theDetectionPoint" : "",
              "theType" : "Prevent",
              "theEnvironmentName" : "Psychosis"
            }, {
              "theDetectionMechanisms" : [ ],
              "theDetectionPoint" : "",
              "theType" : "Prevent",
              "theEnvironmentName" : "Stroke"
            } ]
          },
          "transfer" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TransferEnvironmentProperties"
            },
            "description" : "Environment-specific response properties when risk is transferred.",
            "example" : [ ]
          }
        }
      },
      "Risk" : {
        "required" : [ "theName", "theVulnerabilityName", "theThreatName", "theMisuseCase", "theTags" ],
        "properties" : {
          "theRiskName" : {
            "type" : "string",
            "description" : "Risk name",
            "example" : "User Certificate Theft"
          },
          "theVulnerabilityName" : {
            "type" : "string",
            "description" : "The name of the vulnerability exploited by this risk.",
            "example" : "Certificate ubiquity"
          },
          "theThreatName" : {
            "type" : "string",
            "description" : "The name of the threat leveraged by this risk.",
            "example" : "Trojan Horse"
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags",
            "example" : [ ]
          },
          "theMisuseCase" : {
            "$ref" : "#/components/schemas/MisuseCase"
          }
        }
      },
      "RiskRating" : {
        "description" : "Qualitative rating of the risk based on threat likelihood and vulnerability severity.  Automatically generated and read-only.",
        "required" : [ "environment", "vulnerability", "threat", "rating" ],
        "properties" : {
          "environment" : {
            "type" : "string",
            "description" : "Environment associated with this risk's rating",
            "example" : "Psychosis"
          },
          "vulnerability" : {
            "type" : "string",
            "description" : "Risk's vulnerability",
            "example" : "Certificate ubiquity"
          },
          "threat" : {
            "type" : "string",
            "description" : "Risk's threat",
            "example" : "Social Engineering"
          },
          "rating" : {
            "type" : "string",
            "enum" : [ "Negligible", "Tolerable", "Undesirable", "Intolerable" ],
            "description" : "Risk rating",
            "example" : "Undesirable"
          }
        }
      },
      "Role" : {
        "required" : [ "theName", "theType", "theShortCode", "theDescription" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Role name",
            "example" : "Certificate Authority"
          },
          "theType" : {
            "type" : "string",
            "enum" : [ "Attacker", "Stakeholder", "Data Controller", "Data Processor", "Data Subject" ],
            "description" : "Type of role",
            "example" : "Stakeholder"
          },
          "theShortCode" : {
            "type" : "string",
            "description" : "Short code for role",
            "example" : "CA"
          },
          "theDescription" : {
            "type" : "string",
            "description" : "Description of the role",
            "example" : "Authorises access requests for NeuroGrid and responsible for day-to-day administration."
          }
        }
      },
      "SecurityAttribute" : {
        "required" : [ "name", "value", "rationale" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Security attribute name",
            "enum" : [ "Confidentiality", "Integrity", "Availability", "Accountability", "Anonymity", "Pseudonymity", "Unobservability", "Unlinkability" ],
            "example" : "Confidentiality"
          },
          "value" : {
            "type" : "string",
            "description" : "Security attribute value",
            "enum" : [ "None", "Low", "Medium", "High" ],
            "example" : "High"
          },
          "rationale" : {
            "type" : "string",
            "description" : "Rationale for security attribute value",
            "example" : "Researchers very worried about the disclosure of partially anonymised patient data."
          }
        }
      },
      "SecurityPattern" : {
        "required" : [ "theName", "theConcernAssociations", "theProblem", "theSolution", "theRequirements", "theContext" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Security pattern name",
            "example" : "Packet Filter Firewall"
          },
          "theConcernAssociations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PatternStructure"
            },
            "description" : "Associations between template assets that exist because of this pattern.",
            "example" : [ {
              "theHeadRole" : "",
              "theTailAdornment" : "Association",
              "theHeadAsset" : "PFFirewall",
              "theHeadNry" : "1",
              "theTailRole" : "",
              "theHeadAdornment" : "Composition",
              "theTailAsset" : "RuleBase",
              "theTailNry" : "1"
            }, {
              "theHeadRole" : "",
              "theTailAdornment" : "Association",
              "theHeadAsset" : "PFFirewall",
              "theHeadNry" : "*",
              "theTailRole" : "",
              "theHeadAdornment" : "Association",
              "theTailAsset" : "LocalHost",
              "theTailNry" : "1"
            }, {
              "theHeadRole" : "",
              "theTailAdornment" : "Association",
              "theHeadAsset" : "ExternalHost",
              "theHeadNry" : "1",
              "theTailRole" : "",
              "theHeadAdornment" : "Association",
              "theTailAsset" : "PFFirewall",
              "theTailNry" : "*"
            }, {
              "theHeadRole" : "",
              "theTailAdornment" : "Association",
              "theHeadAsset" : "RuleBase",
              "theHeadNry" : "1",
              "theTailRole" : "",
              "theHeadAdornment" : "Composition",
              "theTailAsset" : "Rule",
              "theTailNry" : "*"
            } ]
          },
          "theProblem" : {
            "type" : "string",
            "description" : "The problem this security pattern is design to address.",
            "example" : "Some hosts on other networks may try to attack the local network through their IP-level payloads.  We also need to communicate with other networks, so isolating our network is not an option.  The protection mechanism should reflect the security policies of the organisation, and any protection mechanism should be transparent to the user."
          },
          "theSolution" : {
            "type" : "string",
            "description" : "A description of how this security pattern acts a solution to the problem.",
            "example" : "A Packet Filter Firewall intercepts all traffic coming and going from a port P and inspects its packets.  Those coming from or going to mistrusted addresses are rejected"
          },
          "theRequirements" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TemplateRequirement"
            },
            "description" : "The template requirements that specify or constrain the security pattern's behaviour.",
            "example" : [ {
              "theFitCriterion" : "None",
              "theAsset" : "Rule",
              "theRationale" : "Defines organisational policy for network access.",
              "theType" : "Security",
              "theName" : "Policy rules",
              "theDescription" : "The Organisational Security Policy shall be modelled as a set of access rules."
            }, {
              "theFitCriterion" : "Design documentation of deployment should closely match a reference security architecture.",
              "theAsset" : "PFFirewall",
              "theRationale" : "Avoids introduction of vulnerabilities due to inappropriate firewall application.",
              "theType" : "Security",
              "theName" : "Standard Packet Filter Firewall",
              "theDescription" : "The Packet Filter Firewall shall be configured according to a standard security architecture."
            } ]
          },
          "theContext" : {
            "type" : "string",
            "description" : "Describes the context to the problem the security pattern addresses.",
            "example" : "Computer systems on a local network connected to the Internet and to other networks with different levels of trust.  A host in a local network receives and sends traffic to other networks.  This traffic has several layers or levels.  THe most basic level is the IP level, made up of packets consisting of headers and bodies (payloads).  The headers include the source and destination addresses as well as other routing information, while the bodies include the message payloads."
          }
        }
      },
      "SummaryResult" : {
        "required" : [ "theValue", "theLabel" ],
        "properties" : {
          "theValue" : {
            "type" : "integer",
            "description" : "Numeric value feeding into the summary graph",
            "example" : 6
          },
          "theLabel" : {
            "type" : "string",
            "description" : "Label for the numeric value",
            "example" : "Intolerable"
          }
        }
      },
      "Task" : {
        "required" : [ "theName", "theShortCode", "theObjective", "isAssumption", "theAuthor", "theTags", "theEnvironmentProperties" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Task name",
            "example" : "Download data"
          },
          "theShortCode" : {
            "type" : "string",
            "description" : "Short code for task",
            "example" : "DD"
          },
          "theObjective" : {
            "type" : "string",
            "description" : "The task's objective",
            "example" : "Download data"
          },
          "isAssumption" : {
            "type" : "integer",
            "description" : "Indicates (1) whether this task is based on assumption data or not.",
            "example" : 0
          },
          "theAuthor" : {
            "type" : "string",
            "description" : "Authors/contributors to the task description",
            "example" : "Shamal Faily"
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags"
          },
          "theEnvironmentProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaskEnvironmentProperties"
            },
            "description" : "Environment-specific task properties",
            "example" : [ {
              "theConsequences" : "None",
              "theBenefits" : "None",
              "theEnvironmentName" : "Psychosis",
              "theAssets" : [ "Analysis data", "Portal", "Web-browser", "Client workstation" ],
              "theDependencies" : "Permission to login to NeuroGrid.  Permission to download data. Acknowledgement has been sent that results are available for download.",
              "thePersonas" : [ {
                "theDemands" : "Low",
                "thePersona" : "Claire",
                "theFrequency" : "Low",
                "theDuration" : "Low",
                "theGoalConflict" : "High"
              } ],
              "theConcernAssociations" : [ ],
              "theNarrative" : "After NeuroGrid finishes executing a workflow, checks are run on the data to ensure that the results have been anonymised.  When these checks indicate that the results have been sanitised, a message is sent to Claire, the workflow submitter, that the workflow results are available for download.  On receiving this message, Claire logs into NeuroGrid and downloads the results to her personal area."
            }, {
              "theConsequences" : "None",
              "theBenefits" : "None",
              "theEnvironmentName" : "Stroke",
              "theAssets" : [ "Analysis data", "Portal", "Web-browser", "Client workstation" ],
              "theDependencies" : "Permission to login to NeuroGrid.  Permission to download data. Acknowledgement has been sent that results are available for download.",
              "thePersonas" : [ {
                "theDemands" : "Low",
                "thePersona" : "Tom",
                "theFrequency" : "Medium",
                "theDuration" : "Medium",
                "theGoalConflict" : "High"
              } ],
              "theConcernAssociations" : [ ],
              "theNarrative" : "After NeuroGrid finishes executing a workflow, a message is sent to Tom, the workflow submitter, that the workflow results are available for download.  On receiving this message, Tom logs into NeuroGrid and downloads the results to his personal area."
            } ]
          }
        }
      },
      "TaskCharacteristic" : {
        "required" : [ "theTaskName", "theModQual", "theCharacteristic", "theGrounds", "theWarrant", "theBacking", "theRebuttal" ],
        "properties" : {
          "theTaskName" : {
            "type" : "string",
            "description" : "Name of the task associated with this characteristic",
            "example" : "Policy conflict"
          },
          "theModQual" : {
            "type" : "string",
            "description" : "Modal qualifier that indicates how much confidence there is in the characteristic.",
            "example" : "Definitely"
          },
          "theCharacteristic" : {
            "type" : "string",
            "description" : "Description of the task characteristic",
            "example" : "Constructs coarse grained policy from fine-grained rules"
          },
          "theGrounds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CharacteristicReference"
            },
            "description" : "Grounds for the argument justifying the task characteristic.",
            "example" : [ {
              "theReferenceName" : "Editors support fine and coarse grained policy editing",
              "theReferenceDescription" : "",
              "theCharacteristicType" : "grounds",
              "theReferenceContribution" : null,
              "theDimensionName" : "requirement",
              "theReferenceSynopsis" : null
            }, {
              "theReferenceName" : "Keeps work and personal life separate in her online identities",
              "theReferenceDescription" : "She has many online identities, but likes to keep her work and personal life separate",
              "theCharacteristicType" : "grounds",
              "theReferenceContribution" : null,
              "theDimensionName" : "document",
              "theReferenceSynopsis" : null
            }, {
              "theReferenceName" : "Policies contain fine-grained rules",
              "theReferenceDescription" : "",
              "theCharacteristicType" : "grounds",
              "theReferenceContribution" : null,
              "theDimensionName" : "requirement",
              "theReferenceSynopsis" : null
            }, {
              "theReferenceName" : "Sophisticated policy editing tools",
              "theReferenceDescription" : "",
              "theCharacteristicType" : "grounds",
              "theReferenceContribution" : null,
              "theDimensionName" : "requirement",
              "theReferenceSynopsis" : null
            } ]
          },
          "theWarrant" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CharacteristicReference"
            },
            "description" : "Warrant for the argument justifying the task characteristic.",
            "example" : [ {
              "theReferenceName" : "Has a second privacy policy for not being observable",
              "theReferenceDescription" : "She configures a new policy in webinos that will not keep records of what she is doing and where she is going, and will keep her devices hidden from nearby networks.  She can switch to this policy very easily, and does so whenever she feels she would like greater unobservability.",
              "theCharacteristicType" : "warrant",
              "theReferenceContribution" : null,
              "theDimensionName" : "document",
              "theReferenceSynopsis" : null
            } ]
          },
          "theBacking" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of reference names that act as backing to the warrant elements.",
            "example" : [ "Manageable privacy policies across the application lifecycle User Story" ]
          },
          "theRebuttal" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CharacteristicReference"
            },
            "description" : "Rebuttal for the argument justifying the task characteristic.",
            "example" : [ ]
          }
        }
      },
      "TaskEnvironmentProperties" : {
        "required" : [ "theEnvironmentName", "theAssets", "theBenefits", "theConcernAssociations", "theConsequences", "theDependencies", "theNarrative", "thePersonas" ],
        "properties" : {
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "Name of environment the task properties are specific to.",
            "example" : "Psychosis"
          },
          "theAssets" : {
            "type" : "string",
            "description" : "The names of assets associated with the task in this environment.",
            "example" : [ "Analysis data", "Portal", "Web-browser", "Client workstation" ]
          },
          "theBenefits" : {
            "type" : "string",
            "description" : "The benefits associated with this task in this environment.",
            "example" : "None"
          },
          "theConcernAssociations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConcernAssociation"
            },
            "description" : "Asset associations associated with environment-specific task assets.",
            "example" : [ ]
          },
          "theConsequences" : {
            "type" : "string",
            "description" : "The consequences associated with this task in this environment.",
            "example" : "None"
          },
          "theNarrative" : {
            "type" : "string",
            "description" : "The task scenario for this environment.",
            "example" : "After NeuroGrid finishes executing a workflow, a message is sent to Tom, the workflow submitter, that the workflow results are available for download.  On receiving this message, Tom logs into NeuroGrid and downloads the results to his personal area."
          },
          "thePersonas" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PersonaTaskCharacteristic"
            },
            "description" : "Summative details on the work impact of this task to each persona associated with the task in this environment.",
            "example" : [ {
              "theDemands" : "Low",
              "thePersona" : "Tom",
              "theFrequency" : "Medium",
              "theDuration" : "Medium",
              "theGoalConflict" : "High"
            } ]
          }
        }
      },
      "TemplateAsset" : {
        "required" : [ "theName", "theShortCode", "theDescription", "theSignificance", "theType", "theSurfaceType", "theAccessRight", "theProperties", "theTags", "theInterface" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Template asset name",
            "example" : "PFFirewall"
          },
          "theShortCode" : {
            "type" : "string",
            "description" : "Short code for template asset",
            "example" : "PFF"
          },
          "theDescription" : {
            "type" : "string",
            "description" : "Template asset description",
            "example" : "Intercepts all traffic coming and going from a port P and inspects its packets."
          },
          "theSignificance" : {
            "type" : "string",
            "description" : "Summary of the template asset's significance.",
            "example" : "Effectiveness and speed may be limited due to its rule set.  Can only enforce traffic going through the firewall.  Can't stop attacks at anything higher than an IP level.  Performance impact due to analysing each and every packet."
          },
          "theType" : {
            "type" : "string",
            "enum" : [ "Hardware", "Information", "People", "Software", "Systems" ],
            "description" : "Type of template asset",
            "example" : "Software"
          },
          "theSurfaceType" : {
            "type" : "string",
            "description" : "The type of surface exposed by this template asset",
            "example" : "Privileged application"
          },
          "theAccessRight" : {
            "type" : "string",
            "description" : "The level of access right needed to interact with this template asset.",
            "example" : "trusted"
          },
          "theProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SecurityAttribute"
            },
            "minItems" : 8,
            "maxItems" : 8,
            "description" : "The security properties of the template asset that need to be protected in this environment.",
            "example" : [ {
              "value" : "None",
              "name" : "Confidentiality",
              "rationale" : "None"
            }, {
              "value" : "Medium",
              "name" : "Integrity",
              "rationale" : "None"
            }, {
              "value" : "High",
              "name" : "Availability",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Accountability",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Anonymity",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Pseudonymity",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Unlinkability",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Unobservability",
              "rationale" : "None"
            } ]
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags",
            "example" : [ "tag1", "tag2" ]
          },
          "theInterfaces" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Interface"
            },
            "description" : "Known interfaces to the template asset.",
            "example" : [ [ {
              "theInterfaceName" : "if1",
              "theInterfaceType" : "provided",
              "theAccessRight" : "anonymous",
              "thePrivilege" : "normal"
            } ] ]
          }
        }
      },
      "TemplateGoal" : {
        "required" : [ "theName", "theDefinition", "theRationale", "theResponsibilities", "theConcerns" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Template goal name",
            "example" : "Device CA"
          },
          "theDefinition" : {
            "type" : "string",
            "description" : "Definition of the template goal.",
            "example" : "The personal zone proxy shall be the certificate authority for a device enrolled in a personal zone."
          },
          "theRationale" : {
            "type" : "string",
            "description" : "Justification for the template goal.",
            "example" : "None"
          },
          "theResponsibilities" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Names of roles responsible for this template goal.",
            "example" : [ ]
          },
          "theConcerns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Names of template assets associated with this template goal.",
            "example" : [ ]
          }
        }
      },
      "TemplateRequirement" : {
        "required" : [ "theName", "theDescription", "theAssetName", "theFitCriterion", "theRationale", "theType" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Short name synopsis of the template requirement",
            "example" : "Policy rules"
          },
          "theDescription" : {
            "type" : "string",
            "description" : "The requirement text.",
            "example" : "The Organisational Security Policy shall be modelled as a set of access rules."
          },
          "theAssetName" : {
            "type" : "string",
            "description" : "The name of the template asset this template requirement is associated with."
          },
          "theFitCriterion" : {
            "type" : "string",
            "description" : "Fit criterion which, if satisfied, validates the template requirement.",
            "example" : "None."
          },
          "theRationale" : {
            "type" : "string",
            "description" : "The template requirement's justification.",
            "example" : "Define's organisational policy for network access."
          },
          "theType" : {
            "type" : "string",
            "description" : "The template requirement type.",
            "enum" : [ "Functional", "Data", "Look and Feel", "Usability", "Performance", "Operational", "Maintainability", "Portability", "Security", "Cultural and Political", "Legal", "Privacy" ],
            "example" : "Security"
          }
        }
      },
      "Threat" : {
        "required" : [ "theThreatName", "theType", "theMethod", "theTags", "theEnvironmentProperties" ],
        "properties" : {
          "theThreatName" : {
            "type" : "string",
            "description" : "Threat name",
            "example" : "Clinical data modification"
          },
          "theType" : {
            "type" : "string",
            "description" : "Type of threat.  These are importable",
            "example" : "Electronic/Hacking"
          },
          "theMethod" : {
            "type" : "string",
            "description" : "General approach taken by attackers to carry out this threat",
            "example" : "TBC"
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags",
            "example" : [ ]
          },
          "theEnvironmentProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ThreatEnvironmentProperties"
            },
            "description" : "Environment-specific threat properties",
            "example" : [ {
              "theProperties" : [ {
                "value" : "High",
                "name" : "Confidentiality",
                "rationale" : "None"
              }, {
                "value" : "High",
                "name" : "Integrity",
                "rationale" : "None"
              }, {
                "value" : "Medium",
                "name" : "Availability",
                "rationale" : "None"
              }, {
                "value" : "Medium",
                "name" : "Accountability",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Anonymity",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Pseudonymity",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Unlinkability",
                "rationale" : "None"
              }, {
                "value" : "None",
                "name" : "Unobservability",
                "rationale" : "None"
              } ],
              "theEnvironmentName" : "Stroke",
              "theAttackers" : [ "Yves" ],
              "theLikelihood" : "Improbable",
              "theAssets" : [ "Clinical data" ]
            } ]
          }
        }
      },
      "ThreatEnvironmentProperties" : {
        "required" : [ "theEnvironmentName", "theAssets", "theLikelihood", "theAttackers", "theProperties" ],
        "properties" : {
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "The environment these threat properties are specific to.",
            "example" : "Stroke"
          },
          "theAssets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The names of assets endangered by this threat in this environment.",
            "example" : [ "Clinical Data" ]
          },
          "theLikelihood" : {
            "type" : "string",
            "enum" : [ "Incredible", "Improbable", "Remote", "Occasional", "Probable", "Frequent" ],
            "description" : "The likelihood of the threat in this environment.",
            "example" : "Improbable"
          },
          "theAttackers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The name of attackers with the ability to use this threat in this environment.",
            "example" : [ "Yves" ]
          },
          "theProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SecurityAttribute"
            },
            "minItems" : 8,
            "maxItems" : 8,
            "description" : "The asset/s security properties of interest to attackers in this environment.",
            "example" : [ {
              "value" : "High",
              "name" : "Confidentiality",
              "rationale" : "None"
            }, {
              "value" : "High",
              "name" : "Integrity",
              "rationale" : "None"
            }, {
              "value" : "Medium",
              "name" : "Availability",
              "rationale" : "None"
            }, {
              "value" : "Medium",
              "name" : "Accountability",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Anonymity",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Pseudonymity",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Unlinkability",
              "rationale" : "None"
            }, {
              "value" : "None",
              "name" : "Unobservability",
              "rationale" : "None"
            } ]
          }
        }
      },
      "Trace" : {
        "required" : [ "theFromObject", "theFromName", "theToObject", "theToName" ],
        "properties" : {
          "theFromObject" : {
            "type" : "string",
            "enum" : [ "component", "countermeasure", "domainproperty", "requirement", "task", "usecase" ],
            "description" : "Type of object being traced from."
          },
          "theFromName" : {
            "type" : "string",
            "description" : "Name of object being traced from."
          },
          "theToObject" : {
            "type" : "string",
            "enum" : [ "document_reference", "requirement", "role", "task", "usecase", "vulnerability" ],
            "description" : "Type of object being traced to."
          },
          "theToName" : {
            "type" : "string",
            "description" : "Name of object being traced to."
          }
        }
      },
      "TransferEnvironmentProperties" : {
        "required" : [ "theEnvironmentName", "theRoles", "theRationale" ],
        "properties" : {
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "Environment this risk response is specific to.",
            "example" : "Stroke"
          },
          "theRoles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ValuedRole"
            },
            "description" : "Names of roles risk transferred to in this environment, and the cost level of transferring the risk.",
            "example" : [ {
              "roleName" : "Certificate Authority",
              "cost" : "Low"
            } ]
          }
        }
      },
      "TrustBoundary" : {
        "required" : [ "theName", "theDescription", "theEnvironmentProperties" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Trust boundary name",
            "example" : "Operations"
          },
          "theDescription" : {
            "type" : "string",
            "description" : "Description of trust boundary",
            "example" : "All processes and objects associated with plant operations is considered trustworthy."
          },
          "theEnvironmentProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TrustBoundaryEnvironmentProperties"
            },
            "example" : [ {
              "theComponents" : [ {
                "theType" : "process",
                "theName" : "Raise Alarm"
              }, {
                "theType" : "process",
                "theName" : "Log Event"
              }, {
                "theType" : "process",
                "theName" : "Suppress Alarm"
              }, {
                "theType" : "datastore",
                "theName" : "Works Diary"
              }, {
                "theType" : "datastore",
                "theName" : "SCADA Workstation"
              } ],
              "theName" : "Day"
            } ]
          }
        }
      },
      "TrustBoundaryEnvironmentProperties" : {
        "required" : [ "theName", "thePrivilege", "theComponents" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "The name of the environment these trust boundary properties are specific to.",
            "example" : "Day"
          },
          "thePrivilege" : {
            "type" : "string",
            "description" : "Level of privilege that the components within the trust boundaries operate at in this environment."
          },
          "theeComponents" : {
            "type" : "object",
            "required" : [ "theType", "theName" ],
            "properties" : {
              "theType" : {
                "type" : "string",
                "enum" : [ "datastore", "process" ],
                "description" : "The type of DFD component within the trust boundary in this environment.",
                "example" : "process"
              },
              "theName" : {
                "type" : "string",
                "description" : "The name of DFD component within the trust boundary in this environment.",
                "example" : "RaiseAlarm"
              }
            }
          }
        }
      },
      "UnexpectedMessage" : {
        "required" : [ "status", "message", "code" ],
        "properties" : {
          "status" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "code" : {
            "type" : "integer"
          }
        },
        "example" : [ {
          "status" : "Object not found",
          "message" : "The provided asset name could not be found in the database. You have requested this URI [/api/assets/name/invalidname] but did you mean /api/assets/name/<string:name> or /api/assets/model/environment/<string:environment>/asset/<string:asset> or /api/tasks/name/<string:task>/environment/<string:environment>/hindrance ?",
          "code" : 404
        } ]
      },
      "UseCase" : {
        "required" : [ "theName", "theTags", "theAuthor", "theCode", "theActors", "theDescription", "theReferenceContributions", "theEnvironmentProperties" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "Use case name",
            "example" : "Modify Telemetry Software"
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags",
            "example" : [ ]
          },
          "theAuthor" : {
            "type" : "string",
            "description" : "Author/s of use case",
            "example" : "Anon"
          },
          "theCode" : {
            "type" : "string",
            "description" : "Use case identifying code",
            "example" : "MTS"
          },
          "theActors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Names of roles that are use case actors in this use case.",
            "example" : [ "Instrument Technician" ]
          },
          "theDescription" : {
            "type" : "string",
            "description" : "Objective of use case",
            "example" : "Modify Telemetry Software"
          },
          "theReferenceContributions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UseCaseContribution"
            },
            "description" : "Contribution use case makes to social goals or soft goals.",
            "example" : [ ]
          },
          "theEnvironmentProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UseCaseEnvironmentProperties"
            },
            "description" : "Environment-specific use case properties",
            "example" : [ {
              "theSteps" : [ {
                "theActor" : "",
                "theExceptions" : [ ],
                "theTags" : [ ],
                "theSynopsis" : "",
                "theActorType" : "",
                "theStepText" : "Instrument Technician requests verification of software change"
              }, {
                "theActor" : "",
                "theExceptions" : [ ],
                "theTags" : [ ],
                "theSynopsis" : "",
                "theActorType" : "",
                "theStepText" : "System sends software change alarm to Telemetry Network"
              }, {
                "theActor" : "",
                "theExceptions" : [ ],
                "theTags" : [ ],
                "theSynopsis" : "",
                "theActorType" : "",
                "theStepText" : "System displays modified software changes to Instrument Technician"
              }, {
                "theActor" : "",
                "theExceptions" : [ {
                  "theDimensionValue" : "Active Directory software deployment",
                  "theCategoryName" : "Availability Threat",
                  "theName" : "Unavailable software repository",
                  "theDescription" : "Active Directory is unavailable.",
                  "theDimensionType" : "goal"
                } ],
                "theTags" : [ ],
                "theSynopsis" : "",
                "theActorType" : "",
                "theStepText" : "Instrument Technician submits software modification report to the system."
              }, {
                "theActor" : "",
                "theExceptions" : [ ],
                "theTags" : [ ],
                "theSynopsis" : "",
                "theActorType" : "",
                "theStepText" : "System acknowledges software modification."
              } ],
              "thePostCond" : "Modified software alarm received by telemetry network.  Modified software on software repository.  Software modification report on software repository.",
              "thePreCond" : "Software repository online.  Alarm mechanisms online.  Instrument technician authenticated with outstation.  Instrument technician authenticated with telemetry network.  Modified software on laptop and outstation.",
              "theEnvironmentName" : "Day"
            }, {
              "theSteps" : [ {
                "theActor" : "",
                "theExceptions" : [ ],
                "theTags" : [ ],
                "theSynopsis" : "",
                "theActorType" : "",
                "theStepText" : "Instrument Technician requests verification of software change"
              }, {
                "theActor" : "",
                "theExceptions" : [ ],
                "theTags" : [ ],
                "theSynopsis" : "",
                "theActorType" : "",
                "theStepText" : "System sends software change alarm to Telemetry Network"
              }, {
                "theActor" : "",
                "theExceptions" : [ ],
                "theTags" : [ ],
                "theSynopsis" : "",
                "theActorType" : "",
                "theStepText" : "System displays modified software changes to Instrument Technician"
              } ],
              "thePostCond" : "Modified software alarm received by telemetry network.",
              "thePreCond" : "Alarm mechanisms online.  Instrument technician authenticated with outstation.  Modified software on laptop and outstation.",
              "theEnvironmentName" : "Night"
            } ]
          }
        }
      },
      "UseCaseContribution" : {
        "required" : [ "theContributionTo", "theReferenceContribution" ],
        "properties" : {
          "theContributionTo" : {
            "type" : "string",
            "description" : "Name of the goal/softgoal associated with a persona characteristic that this use case contributes to.",
            "example" : "Mobile app reliance"
          },
          "theReferenceContribution" : {
            "type" : "object",
            "required" : [ "theContributionTo", "theReferenceContribution" ],
            "properties" : {
              "theContributionTo" : {
                "type" : "string",
                "description" : "The social goal modelling element this element contributes to.",
                "example" : "Mobile app reliance"
              },
              "theReferenceContribution" : {
                "$ref" : "#/components/schemas/ReferenceContribution"
              }
            }
          }
        }
      },
      "UseCaseEnvironmentProperties" : {
        "required" : [ "thePreCond", "theSteps", "thePostCond" ],
        "properties" : {
          "thePreCond" : {
            "type" : "string",
            "description" : "Preconditions that must hold before this use case begins in this environment.",
            "example" : "Alarm mechanisms online.  Instrument technician authenticated with outstation.  Modified software on laptop and outstation."
          },
          "theSteps" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "theStepText", "theExceptions", "theSynopsis", "theActor", "theActorType" ],
              "properties" : {
                "theStepText" : {
                  "type" : "string",
                  "description" : "Description of the step taken by the actor or system.",
                  "example" : "Instruction technician requests verification of software change."
                },
                "theExceptions" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "required" : [ "theName", "theCategoryName", "theDescription", "theDimensionType", "theDimensionValue" ],
                    "properties" : {
                      "theName" : {
                        "type" : "string",
                        "description" : "Exception name",
                        "example" : "Unavailable software repository"
                      },
                      "theCategoryName" : {
                        "type" : "string",
                        "enum" : [ "Confidentiality Threat", "Integrity Threat", "Availability Threat", "Accountability Threat", "Anonymity Threat", "Pseudonymity Threat", "Unlinkability Threat", "Unobservability Threat", "Vulnerability", "Duration", "Frequency", "Demands", "Goal Support" ],
                        "description" : "Category of exception",
                        "example" : "Availability Threat"
                      },
                      "theDescription" : {
                        "type" : "string",
                        "description" : "Description of the exception.",
                        "example" : "Active Directory is unavailable"
                      },
                      "theDimensionType" : {
                        "type" : "string",
                        "enum" : [ "goal", "requirement" ],
                        "description" : "Indicates whether a goal or requirement is being obstructed as a result of this exception.",
                        "example" : "goal"
                      },
                      "theDimensionValue" : {
                        "type" : "string",
                        "description" : "The name of the dimension (goal or requirement) obstructed by the exception.",
                        "example" : "Active Directory software deployment"
                      }
                    }
                  },
                  "description" : "List of exceptions that might occur during this step.",
                  "example" : [ {
                    "theDimensionValue" : "Active Directory software deployment",
                    "theCategoryName" : "Availability Threat",
                    "theName" : "Unavailable software repository",
                    "theDescription" : "Active Directory is unavailable.",
                    "theDimensionType" : "goal"
                  } ]
                },
                "theSynopsis" : {
                  "type" : "string",
                  "description" : "A synopsis of the step expressed in intentional terms.",
                  "example" : "Request verification"
                },
                "theActorType" : {
                  "type" : "string",
                  "enum" : [ "asset", "component", "role" ],
                  "description" : "The type of social goal actor this step will be within the boundary of.",
                  "example" : "role"
                },
                "theActor" : {
                  "type" : "string",
                  "description" : "The name of the actor this step will be within the boundary of.",
                  "example" : "Instrument Technician"
                }
              }
            }
          },
          "thePostCond" : {
            "type" : "string",
            "description" : "Postconditions that need to hold after the use case completes in this environment.",
            "example" : "Modified software alarm received by telemetry network.  Modified software on software repository.  Software modification report on software repository."
          }
        }
      },
      "ValidationResult" : {
        "required" : [ "theLabel", "theMessage" ],
        "properties" : {
          "theLabel" : {
            "type" : "string",
            "enum" : [ "Accuracy: Personal data integrity", "Data Minimisation: Private data processing", "Composition/Aggregation Integrity Check", "Integrity & Confidentiality: Unmitigated privacy risks", "Lawfulness, Fairness, and Privacy: Fair data processing", "Lawfulness, Fairness, and Privacy: Lawful data handling", "Lawfulness, Fairness, and Privacy: Necessary processing", "New risk contexts", "Purpose limitation: Data purpose", "Storage Limitation: Unprocessed personal data" ],
            "description" : "Validation check",
            "example" : "Composition/Aggregation Integrity Check"
          },
          "theMessage" : {
            "type" : "string",
            "description" : "Detailed message describing the valiation check results",
            "example" : "Integrity of Data node is lower than Workflow."
          }
        }
      },
      "ValuedRole" : {
        "required" : [ "roleName", "cost" ],
        "properties" : {
          "roleName" : {
            "type" : "string",
            "description" : "Name of role",
            "example" : "Certificate Authority"
          },
          "cost" : {
            "type" : "string",
            "enum" : [ "Low", "Medium", "High" ],
            "description" : "Value associated with role",
            "example" : "Low"
          }
        }
      },
      "ValueType" : {
        "required" : [ "theName", "theDescription", "theType", "theScore", "theRationale" ],
        "properties" : {
          "theName" : {
            "type" : "string",
            "description" : "The name of the value type object",
            "example" : "authenticated"
          },
          "theDescription" : {
            "type" : "string",
            "description" : "Description that elaborates the value type object.",
            "example" : "Subject needs to be explicitly authenticated to access resource."
          },
          "theType" : {
            "type" : "string",
            "enum" : [ "asset_value", "asset_type", "access_right", "protocol", "privilege", "surface_type", "vulnerability_type", "severity", "capability", "motivation", "threat_type", "likelihood", "threat_value" ],
            "description" : "Type of value type",
            "example" : "access_right"
          },
          "theScore" : {
            "type" : "integer",
            "description" : "The score associated with this value type.  If scores aren't relevant to the value type, this should be -1.",
            "example" : 5
          },
          "theRationale" : {
            "type" : "string",
            "description" : "Rationale for the value type score.",
            "example" : "None"
          }
        }
      },
      "Vulnerability" : {
        "required" : [ "theVulnerabilityName", "theVulnerabilityType", "theVulnerabilityDescription", "theTags", "theEnvironmentProperties" ],
        "properties" : {
          "theVulnerabilityName" : {
            "type" : "string",
            "description" : "Vulnerability name",
            "example" : "Certificate ubiquity"
          },
          "theVulnerabilityType" : {
            "type" : "string",
            "enum" : [ "Configuration", "Design", "Implementation" ],
            "description" : "Type of vulnerability",
            "example" : "Configuration"
          },
          "theVulnerabilityDescription" : {
            "type" : "string",
            "description" : "Description of vulnerability",
            "example" : "Certificates can be shared, allowing unauthorised users access to the NeuroGrid portal."
          },
          "theTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of meta-data tags",
            "example" : [ "tag1", "tag2" ]
          },
          "theEnvironmentProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VulnerabilityEnvironmentProperties"
            },
            "description" : "Environment-specific vulnerability properties",
            "example" : [ {
              "theSeverity" : "Critical",
              "theEnvironmentName" : "Psychosis",
              "theAssets" : [ "User certificate" ]
            } ]
          }
        }
      },
      "VulnerabilityEnvironmentProperties" : {
        "required" : [ "theEnvironmentName", "theAssets", "theSeverity" ],
        "properties" : {
          "theEnvironmentName" : {
            "type" : "string",
            "description" : "Name of the environment where the vulnerability is situated",
            "example" : "Psychosis"
          },
          "theAssets" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Name of assets exposed to the vulnerability in this environment.",
            "example" : [ "User Certificate" ]
          },
          "theSeverity" : {
            "type" : "string",
            "enum" : [ "Negligible", "Marginal", "Critical", "Catastrophic" ],
            "description" : "Severity of the vulnerability in this environment.",
            "example" : "Critical"
          }
        }
      }
    },
    "securitySchemes" : {
      "cairisAuth" : {
        "type" : "apiKey",
        "in" : "cookie",
        "name" : "session_id"
      }
    }
  }
}